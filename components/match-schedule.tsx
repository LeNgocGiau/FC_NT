"use client"

import { useState, useRef, useEffect } from "react"
import { Calendar, Clock, MapPin, Trophy, Plus, Edit, Trash2, Send, Bot, X, Upload, Image, Sparkles, Volume2, VolumeX, Smile, Star, Goal, Flag, List, Mic, MicOff, XCircle, Settings, Languages, Zap } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Switch } from "@/components/ui/switch"
import { Badge } from "@/components/ui/badge"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import type { Match, Team, Player } from "@/lib/types"
import ConfirmDeleteDialog from "@/components/confirm-delete-dialog"
import { ScrollArea } from "@/components/ui/scroll-area"
import { cn } from "@/lib/utils"
import PlayerRating from "@/components/player-rating"
import MatchEvents, { MatchEvents as MatchEventsType } from "@/components/match-events"
import { Slider } from "@/components/ui/slider"

// Define the PlayerRatingsData interface here to match the one from player-rating.tsx
interface PlayerRating {
  playerId: string
  score: number
  isMVP?: boolean
  comment?: string
}

interface PlayerRatingsData {
  matchId: string
  homeTeamRatings: PlayerRating[]
  awayTeamRatings: PlayerRating[]
  homeMVP?: string
  awayMVP?: string
}

interface MatchScheduleProps {
  matches: Match[]
  onAddMatch: (match: Match) => void
  onUpdateMatch: (match: Match) => void
  onDeleteMatch: (id: string) => void
  homeTeam: Team
  awayTeam: Team
  onUpdateHomeTeam?: (team: Team) => void
  onUpdateAwayTeam?: (team: Team) => void
}

// Types for AI Agent
type AgentAction = 
  | { type: 'ADD_MATCH', match: Partial<Match> }
  | { type: 'FILTER_MATCHES', filter: string }
  | { type: 'FIND_MATCH', criteria: string }
  | { type: 'NONE' };

// Types for reactions
type Reaction = {
  emoji: string;
  count: number;
  users: string[];
  timestamp: number;
}

// Types for messages with reactions
type ChatMessage = {
  role: 'user' | 'ai' | 'agent';
  content: string;
  id: string;
  reactions?: Record<string, Reaction>;
}

// Match events interfaces
interface MatchGoal {
  id: string
  playerId: string
  teamId: string
  minute: number
  assistPlayerId?: string
  isOwnGoal?: boolean
  isPenalty?: boolean
  note?: string
}

interface MatchCard {
  id: string
  playerId: string
  teamId: string
  minute: number
  type: 'yellow' | 'red'
  reason?: string
}

interface MatchEvents {
  goals: MatchGoal[]
  cards: MatchCard[]
}

// Add TypeScript declarations for the SpeechRecognition API
declare global {
  interface Window {
    SpeechRecognition: any;
    webkitSpeechRecognition: any;
    AudioContext: any;
    webkitAudioContext: any;
  }
}

export default function MatchSchedule({ 
  matches, 
  onAddMatch, 
  onUpdateMatch, 
  onDeleteMatch, 
  homeTeam, 
  awayTeam,
  onUpdateHomeTeam,
  onUpdateAwayTeam
}: MatchScheduleProps) {
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [editingMatch, setEditingMatch] = useState<Match | null>(null)
  const [filter, setFilter] = useState<"all" | "upcoming" | "completed">("all")
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false)
  const [matchIdToDelete, setMatchIdToDelete] = useState<string | null>(null)
  const [isRatingDialogOpen, setIsRatingDialogOpen] = useState(false)
  const [ratingMatch, setRatingMatch] = useState<Match | null>(null)
  const [isEventsDialogOpen, setIsEventsDialogOpen] = useState(false)
  const [eventsMatch, setEventsMatch] = useState<Match | null>(null)
  
  // AI chat states
  const [aiQuestion, setAiQuestion] = useState("")
  const [aiResponse, setAiResponse] = useState("")
  const [isAiLoading, setIsAiLoading] = useState(false)
  const [showAiSidebar, setShowAiSidebar] = useState(false)
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([])
  const [uploadedImage, setUploadedImage] = useState<string | null>(null)
  const [imageFile, setImageFile] = useState<File | null>(null)
  const [pendingAgentAction, setPendingAgentAction] = useState<AgentAction | null>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)
  const [isChatDialogOpen, setIsChatDialogOpen] = useState(false)
  const [customApiKey, setCustomApiKey] = useState("")
  const [useCustomApiKey, setUseCustomApiKey] = useState(false)
  const [chatDialogQuestion, setChatDialogQuestion] = useState("")
  const [showingEmojiFor, setShowingEmojiFor] = useState<string | null>(null)
  
  // List of available emojis
  const availableEmojis = ["üëç", "‚ù§Ô∏è", "üòÇ", "üòÆ", "üò¢", "üëè", "üî•", "ÔøΩÔøΩ", "ü§î", "‚≠ê"]

  // Gemini API key
  const GEMINI_API_KEY = "AIzaSyCb2qpQWEHsmNQSOoM3re6yweTfxdJ8VFs"

  // M·∫´u tr·∫≠n ƒë·∫•u m·ªõi
  const newMatchTemplate: Match = {
    id: "",
    homeTeam: "",
    awayTeam: "",
    date: new Date().toISOString().split("T")[0],
    time: "19:00",
    venue: "",
    competition: "",
    completed: false,
  }

  // Speech synthesis state
  const [isSpeechEnabled, setIsSpeechEnabled] = useState(true)
  const synth = typeof window !== 'undefined' ? window.speechSynthesis : null
  
  // B·ªï sung state ƒë·ªÉ l∆∞u tr·ªØ danh s√°ch gi·ªçng n√≥i c√≥ s·∫µn
  const [availableVoices, setAvailableVoices] = useState<SpeechSynthesisVoice[]>([])

  // C·∫≠p nh·∫≠t useEffect hi·ªán c√≥ ho·∫∑c th√™m m·ªõi ƒë·ªÉ l·∫•y danh s√°ch gi·ªçng n√≥i
  useEffect(() => {
    if (typeof window !== 'undefined' && window.speechSynthesis) {
      // L·∫•y danh s√°ch gi·ªçng n√≥i khi component ƒë∆∞·ª£c t·∫°o
      const loadVoices = () => {
        const voices = speechSynthesis.getVoices()
        setAvailableVoices(voices)
      }
      
      // SpeechSynthesis.getVoices c√≥ th·ªÉ tr·∫£ v·ªÅ m·∫£ng r·ªóng khi API ch∆∞a s·∫µn s√†ng
      loadVoices()
      
      // ƒêƒÉng k√Ω s·ª± ki·ªán voiceschanged ƒë·ªÉ l·∫•y danh s√°ch khi c√≥ s·∫µn
      speechSynthesis.onvoiceschanged = loadVoices
      
      return () => {
        // X√≥a event listener khi component unmount
        if (speechSynthesis) {
          speechSynthesis.onvoiceschanged = null
        }
      }
    }
  }, [])

  // Fix the detectTextLanguage function to properly handle type comparison
  const detectTextLanguage = (text: string): 'en' | 'vi' => {
    // M·ªôt s·ªë t·ª´ ph·ªï bi·∫øn trong ti·∫øng Anh
    const englishWords = ['the', 'this', 'that', 'a', 'an', 'is', 'are', 'was', 'were', 'be', 'been', 'have', 'has', 'had', 'do', 'does', 'did', 'will', 'would', 'can', 'could', 'should', 'may', 'might', 'must', 'hello']
    
    // M·ªôt s·ªë t·ª´ ph·ªï bi·∫øn trong ti·∫øng Vi·ªát ho·∫∑c k√Ω t·ª± ƒë·∫∑c tr∆∞ng
    const vietnameseWords = ['c·ªßa', 'v√†', 'c√°c', 'nh·ªØng', 'trong', 'th√¨', 'l√†', 'c√≥', 'kh√¥ng', 'ƒë∆∞·ª£c', 'ƒë√£', 's·∫Ω', 'v·ªõi', 'cho', 'b·∫°n', 't√¥i']
    const vietnameseChars = /[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]/i

    // ƒê·∫øm t·ª´ ph·ªï bi·∫øn ti·∫øng Anh v√† ti·∫øng Vi·ªát
    let englishCount = 0
    let vietnameseCount = 0
    
    // Chuy·ªÉn vƒÉn b·∫£n v·ªÅ ch·ªØ th∆∞·ªùng v√† t√°ch t·ª´
    const lowercasedText = text.toLowerCase()
    const words = lowercasedText.split(/\s+/)
    
    // Ki·ªÉm tra t·ª´ng t·ª´
    for (const word of words) {
      const cleanWord = word.replace(/[.,!?;:'"()]/g, '')
      if (englishWords.includes(cleanWord)) {
        englishCount++
      }
      if (vietnameseWords.includes(cleanWord) || vietnameseChars.test(cleanWord)) {
        vietnameseCount++
      }
    }
    
    // N·∫øu c√≥ d·∫•u ti·∫øng Vi·ªát, ∆∞u ti√™n ti·∫øng Vi·ªát
    if (vietnameseChars.test(lowercasedText)) {
      return 'vi'
    }
    
    // Quy·∫øt ƒë·ªãnh ng√¥n ng·ªØ d·ª±a tr√™n s·ªë l∆∞·ª£ng t·ª´ ph·ªï bi·∫øn
    return englishCount > vietnameseCount ? 'en' : 'vi'
  }

  // Th√™m c√°c state m·ªõi cho c√†i ƒë·∫∑t gi·ªçng n√≥i
  const [isVoiceSettingsOpen, setIsVoiceSettingsOpen] = useState(false)
  const [preferredEnglishVoice, setPreferredEnglishVoice] = useState<string | null>(null)
  const [preferredVietnameseVoice, setPreferredVietnameseVoice] = useState<string | null>(null)
  const [speechRate, setSpeechRate] = useState(0.9)  // Speech rate - 0.1 to 2.0
  const [speechPitch, setSpeechPitch] = useState(1.0) // Speech pitch - 0.1 to 2.0
  const [speechVolume, setSpeechVolume] = useState(1.0) // Volume - 0 to 1.0
  const [highQualityVoice, setHighQualityVoice] = useState(true) // Prefer high-quality voices

  // C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c findBestVoice ƒë·ªÉ c√≥ nhi·ªÅu t√πy ch·ªçn h∆°n v√† ∆∞u ti√™n nh·ªØng gi·ªçng ch·∫•t l∆∞·ª£ng cao
  const findBestVoice = (language: 'en' | 'vi'): SpeechSynthesisVoice | null => {
    if (!availableVoices || availableVoices.length === 0) {
      return null
    }
    
    // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ ch·ªçn gi·ªçng ∆∞a th√≠ch
    const preferredVoiceId = language === 'en' ? preferredEnglishVoice : preferredVietnameseVoice
    
    if (preferredVoiceId) {
      const selectedVoice = availableVoices.find(voice => voice.voiceURI === preferredVoiceId)
      if (selectedVoice) {
        return selectedVoice
      }
    }
    
    // Danh s√°ch c√°c ng√¥n ng·ªØ ∆∞u ti√™n
    const preferredLanguageCodes = {
      en: ['en-GB', 'en-UK', 'en-US', 'en'], // ∆Øu ti√™n gi·ªçng Anh-Anh (British)
      vi: ['vi-VN', 'vi']
    }
    
    // Danh s√°ch t√™n gi·ªçng ch·∫•t l∆∞·ª£ng cao ƒë√£ bi·∫øt
    const knownGoodVoices = {
      en: ['Daniel', 'Oliver', 'James', 'Thomas', 'George', 'Arthur', 'Alex', 'Samantha', 'Karen'],
      vi: ['Chi', 'Lan', 'ƒê·ª©c', 'Minh']
    }

    // Lu√¥n s·ª≠ d·ª•ng gi·ªçng n·ªØ cho ti·∫øng Vi·ªát
    if (language === 'vi') {
      // M·ªü r·ªông danh s√°ch t·ª´ kh√≥a t√™n ph·ª• n·ªØ ti·∫øng Vi·ªát
      const femaleNameKeywords = ['chi', 'lan', 'h∆∞∆°ng', 'mai', 'thu', 'n·ªØ', 'female', 'woman', 'girl', 'c√¥', 'ch·ªã', 'b√†', 'th·ªã', 'loan', 'h·∫±ng', 'h·ªìng', 'ng·ªçc'];
      
      // Th·ª≠ t√¨m gi·ªçng n·ªØ ti·∫øng Vi·ªát d·ª±a tr√™n t√™n
      for (const langCode of preferredLanguageCodes.vi) {
        const femaleVoice = availableVoices.find(voice => 
          voice.lang.startsWith(langCode) && 
          femaleNameKeywords.some(keyword => 
            voice.name.toLowerCase().includes(keyword.toLowerCase())
          )
        );
        
        if (femaleVoice) {
          console.log("S·ª≠ d·ª•ng gi·ªçng n·ªØ ti·∫øng Vi·ªát:", femaleVoice.name);
          return femaleVoice;
        }
      }
      
      // Th·ª≠ t√¨m gi·ªçng kh√¥ng ph·∫£i gi·ªçng nam
      const maleNameKeywords = ['nam', 'male', 'ƒë·ª©c', 'minh', 'anh', '√¥ng', 'ch√∫', 'b√°c', 'quang', 'tu·∫•n', 'h√πng'];
      
      for (const langCode of preferredLanguageCodes.vi) {
        const potentialFemaleVoice = availableVoices.find(voice => 
          voice.lang.startsWith(langCode) && 
          !maleNameKeywords.some(keyword => 
            voice.name.toLowerCase().includes(keyword.toLowerCase())
          )
        );
        
        if (potentialFemaleVoice) {
          console.log("S·ª≠ d·ª•ng gi·ªçng c√≥ kh·∫£ nƒÉng l√† n·ªØ ti·∫øng Vi·ªát:", potentialFemaleVoice.name);
          return potentialFemaleVoice;
        }
      }
      
      // D√πng b·∫•t k·ª≥ gi·ªçng ti·∫øng Vi·ªát n√†o
      const anyVietnameseVoice = availableVoices.find(voice => 
        voice.lang.startsWith('vi')
      );
      
      if (anyVietnameseVoice) {
        console.log("S·ª≠ d·ª•ng gi·ªçng ti·∫øng Vi·ªát d·ª± ph√≤ng:", anyVietnameseVoice.name);
        return anyVietnameseVoice;
      }
    }
    
    // T√¨m gi·ªçng ch·∫•t l∆∞·ª£ng cao ƒë√£ bi·∫øt
    if (highQualityVoice) {
      for (const voiceName of knownGoodVoices[language]) {
        for (const langCode of preferredLanguageCodes[language]) {
          const goodVoice = availableVoices.find(voice => 
            voice.lang.startsWith(langCode) && 
            voice.name.includes(voiceName)
          )
          if (goodVoice) return goodVoice
        }
      }
    }
    
    // ∆Øu ti√™n gi·ªçng c√≥ ch·∫•t l∆∞·ª£ng cao (th∆∞·ªùng l√† gi·ªçng kh√¥ng ph·∫£i m·∫∑c ƒë·ªãnh)
    for (const langCode of preferredLanguageCodes[language]) {
      const premiumVoice = availableVoices.find(voice => 
        voice.lang.startsWith(langCode) && 
        (voice.localService === true || voice.name.includes('Premium') || voice.name.includes('Natural'))
      )
      
      if (premiumVoice) return premiumVoice
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y gi·ªçng cao c·∫•p, ∆∞u ti√™n gi·ªçng kh√¥ng ph·∫£i Google/Microsoft
    for (const langCode of preferredLanguageCodes[language]) {
      const naturalVoice = availableVoices.find(voice => 
        voice.lang.startsWith(langCode) && 
        !voice.name.includes('Google') &&
        !voice.name.includes('Microsoft')
      )
      
      if (naturalVoice) return naturalVoice
    }
    
    // N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, d√πng b·∫•t k·ª≥ gi·ªçng n√†o ph√π h·ª£p
    for (const langCode of preferredLanguageCodes[language]) {
      const anyVoice = availableVoices.find(voice => voice.lang.startsWith(langCode))
      if (anyVoice) return anyVoice
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y gi·ªçng ph√π h·ª£p v·ªõi ng√¥n ng·ªØ, tr·∫£ v·ªÅ null
    return null
  }

  // C·∫≠p nh·∫≠t h√†m speakText v·ªõi nhi·ªÅu c·∫£i ti·∫øn ch·∫•t l∆∞·ª£ng gi·ªçng n√≥i
  const speakText = (text: string) => {
    if (!synth || !isSpeechEnabled || !text) return
    
    // Clean text from HTML tags and markdown
    const cleanText = text.replace(/<[^>]*>?/gm, '').replace(/\[([^\]]+)\]\([^)]+\)/gm, '$1')
    
    // Ph√°t hi·ªán ng√¥n ng·ªØ c·ªßa vƒÉn b·∫£n
    const detectedLanguage = detectTextLanguage(cleanText)
    
    // Create utterance
    const utterance = new SpeechSynthesisUtterance(cleanText)
    
    // C√†i ƒë·∫∑t ng√¥n ng·ªØ v√† gi·ªçng n√≥i ph√π h·ª£p
    if (detectedLanguage === 'en') {
      // T√¨m gi·ªçng ti·∫øng Anh t·ªët nh·∫•t
      const englishVoice = findBestVoice('en')
      if (englishVoice) {
        utterance.voice = englishVoice
        console.log(`Using English voice: ${englishVoice.name}`)
      }
      utterance.lang = 'en-GB' // British English
    } else {
      // T√¨m gi·ªçng ti·∫øng Vi·ªát t·ªët nh·∫•t (s·∫Ω l√† gi·ªçng n·ªØ v√¨ ch√∫ng ta ƒë√£ ∆∞u ti√™n trong h√†m findBestVoice)
      const vietnameseVoice = findBestVoice('vi')
      if (vietnameseVoice) {
        utterance.voice = vietnameseVoice
        console.log(`Using Vietnamese voice: ${vietnameseVoice.name}`)
      }
      utterance.lang = 'vi-VN' // Vietnamese
    }
    
    // √Åp d·ª•ng c√°c tham s·ªë ch·∫•t l∆∞·ª£ng gi·ªçng n√≥i t·ª´ c√†i ƒë·∫∑t ng∆∞·ªùi d√πng
    utterance.rate = speechRate       // T·ªëc ƒë·ªô n√≥i
    utterance.pitch = speechPitch     // Cao ƒë·ªô gi·ªçng
    utterance.volume = speechVolume   // √Çm l∆∞·ª£ng
    
    // √Åp d·ª•ng th√™m c√°c c√†i ƒë·∫∑t ƒë·∫∑c bi·ªát cho tr∆∞·ªùng h·ª£p ti·∫øng Anh
    if (detectedLanguage === 'en') {
      // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho ti·∫øng Anh ƒë·ªÉ gi√∫p gi·ªçng n√≥i m∆∞·ª£t m√† h∆°n
      cleanText.split('.').forEach((sentence, index, array) => {
        if (sentence.trim() === '') return;
        
        // T·∫°o b·∫£n sao c·ªßa c√†i ƒë·∫∑t gi·ªçng n√≥i
        const sentenceUtterance = new SpeechSynthesisUtterance(sentence.trim() + '.')
        sentenceUtterance.voice = utterance.voice
        sentenceUtterance.lang = utterance.lang
        sentenceUtterance.rate = utterance.rate
        sentenceUtterance.pitch = utterance.pitch
        sentenceUtterance.volume = utterance.volume
        
        // Th√™m d·ª´ng nh·∫π gi·ªØa c√°c c√¢u
        if (index < array.length - 1) {
          sentenceUtterance.onend = () => {
            setTimeout(() => {
              // Kh√¥ng l√†m g√¨, ch·ªâ t·∫°o kho·∫£ng d·ª´ng nh·ªè
            }, 100);
          };
        }
        
        synth.speak(sentenceUtterance)
      })
      
      return // ƒê√£ x·ª≠ l√Ω t·ª´ng c√¢u ri√™ng bi·ªát, kh√¥ng c·∫ßn ti·∫øp t·ª•c
    }
    
    // Hi·ªÉn th·ªã th√¥ng tin v·ªÅ vƒÉn b·∫£n ƒë·ªçc
    console.log(`Speaking text: ${cleanText.substring(0, 50)}...`)
    
    // Stop any current speech
    synth.cancel()
    
    // Speak
    synth.speak(utterance)
  }
  
  // Stop speech when component unmounts
  useEffect(() => {
    return () => {
      if (synth) synth.cancel()
    }
  }, [synth])

  // Add new states for network error tracking after the isListening state
  const [isListening, setIsListening] = useState(false)
  const [recognitionSupported, setRecognitionSupported] = useState(false)
  const [recognitionError, setRecognitionError] = useState<string | null>(null)
  const [networkRetryCount, setNetworkRetryCount] = useState(0)
  const [speechConfidence, setSpeechConfidence] = useState<number>(0)
  const [advancedRecognition, setAdvancedRecognition] = useState(true)
  const [isRecognitionSettingsOpen, setIsRecognitionSettingsOpen] = useState(false)
  const [noiseReduction, setNoiseReduction] = useState(true)
  const [autoLanguageDetection, setAutoLanguageDetection] = useState(true)
  const [selectedLanguage, setSelectedLanguage] = useState("vi-VN")
  const [detectedLanguage, setDetectedLanguage] = useState<string | null>(null)
  const recognitionRef = useRef<any>(null)
  const recognitionTimeoutRef = useRef<any>(null)
  const transcriptsRef = useRef<string[]>([])
  const audioContextRef = useRef<AudioContext | null>(null)
  const analyserRef = useRef<AnalyserNode | null>(null)

  // Check for browser support of speech recognition
  useEffect(() => {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition
    if (SpeechRecognition) {
      setRecognitionSupported(true)
    }
  }, [])

  // Add function to detect language from text
  const detectLanguage = (text: string): 'vi' | 'en' | null => {
    if (!text || text.trim().length < 3) return null;
    
    // Check for common Vietnamese diacritical marks and characters
    const vietnamesePattern = /[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]/i;
    if (vietnamesePattern.test(text)) {
      return 'vi';
    }
    
    // Check for common Vietnamese words
    const vietnameseWords = ['c·ªßa', 'v√†', 'c√°c', 'nh·ªØng', 'trong', 'th√™m', 'tr·∫≠n', 'ƒë·∫•u', 'b√≥ng', 'ƒë·ªôi'];
    for (const word of vietnameseWords) {
      if (text.toLowerCase().includes(word)) {
        return 'vi';
      }
    }
    
    // Check for common English words
    const englishWords = ['the', 'and', 'for', 'with', 'match', 'team', 'add', 'football', 'game', 'score'];
    let englishWordCount = 0;
    for (const word of englishWords) {
      if (text.toLowerCase().includes(` ${word} `)) {
        englishWordCount++;
      }
    }
    
    if (englishWordCount >= 2) {
      return 'en';
    }
    
    // Default to null if we can't be sure
    return null;
  };

  // Setup audio processing for noise reduction
  const setupNoiseReduction = () => {
    if (!noiseReduction) return null;
    
    try {
      // Create audio context
      if (!audioContextRef.current) {
        audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();
      }
      
      // Get user media with specific constraints for noise reduction
      navigator.mediaDevices.getUserMedia({
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true,
          // Advanced constraints for even better noise reduction
          ...(typeof window !== 'undefined' && {
            channelCount: 1,
            sampleRate: 48000,
          }),
        },
        video: false
      }).then(stream => {
        if (!audioContextRef.current) return;
        
        // Create source node from microphone stream
        const source = audioContextRef.current.createMediaStreamSource(stream);
        
        // Create analyser node
        const analyser = audioContextRef.current.createAnalyser();
        analyser.fftSize = 2048;
        analyser.smoothingTimeConstant = 0.8;
        analyserRef.current = analyser;
        
        // Connect source to analyser
        source.connect(analyser);
        
        // Create dynamic compressor for noise reduction
        const compressor = audioContextRef.current.createDynamicsCompressor();
        compressor.threshold.value = -50;
        compressor.knee.value = 40;
        compressor.ratio.value = 12;
        compressor.attack.value = 0;
        compressor.release.value = 0.25;
        
        // Connect analyser to compressor
        analyser.connect(compressor);
        
        // Connect compressor to destination (output)
        // Only for monitoring, speech recognition still uses raw input
        // compressor.connect(audioContextRef.current.destination);
        
        console.log("Noise reduction setup completed");
      }).catch(err => {
        console.error("Error accessing microphone for noise reduction:", err);
      });
      
      return () => {
        // Cleanup when component unmounts or settings change
        if (audioContextRef.current) {
          audioContextRef.current.close();
          audioContextRef.current = null;
        }
        analyserRef.current = null;
      };
    } catch (error) {
      console.error("Error setting up noise reduction:", error);
      return null;
    }
  };

  // Setup audio context when noise reduction setting changes
  useEffect(() => {
    if (noiseReduction) {
      const cleanup = setupNoiseReduction();
      return () => {
        if (cleanup) cleanup();
      };
    } else if (audioContextRef.current) {
      audioContextRef.current.close();
      audioContextRef.current = null;
      analyserRef.current = null;
    }
  }, [noiseReduction]);

  // Enhance the processTranscribedText function to handle language-specific processing
  const processTranscribedText = (text: string, languageHint?: 'vi' | 'en'): string => {
    if (!text) return text;
    
    // Try to detect language if not provided
    const lang = languageHint || (autoLanguageDetection ? detectLanguage(text) : null) || (selectedLanguage === 'vi-VN' ? 'vi' : 'en');
    
    // Update detected language state for UI feedback
    if (lang !== (detectedLanguage || (selectedLanguage === 'vi-VN' ? 'vi' : 'en'))) {
      setDetectedLanguage(lang);
    }
    
    // Different processing for different languages
    if (lang === 'vi') {
      // Vietnamese processing

      // Capitalize first letter of sentences
      const withCapitalizedSentences = text.replace(/(^\s*\w|[.!?]\s*\w)/g, match => match.toUpperCase());
      
      // Fix common Vietnamese speech recognition errors
      let processedText = withCapitalizedSentences;
      
      // Fix spacing around punctuation
      processedText = processedText
        .replace(/\s+([.,;:!?])/g, '$1')
        .replace(/([.,;:!?])\s+/g, '$1 ')
        .replace(/\s+/g, ' ');
      
      // Fix Vietnamese diacritics issues commonly misinterpreted
      const diacriticsMap: Record<string, string> = {
        'voi': 'v·ªõi',
        'the': 'th·∫ø',
        'da': 'ƒë√°',
        'cau': 'c√¢u',
        'tran': 'tr·∫≠n',
        'dau': 'ƒë·∫•u',
        'hoi': 'h·ªèi',
        'thang': 'th·∫Øng',
        'toi': 't√¥i',
        'muon': 'mu·ªën',
        'them': 'th√™m',
        'xoa': 'x√≥a',
      };
      
      // Replace common misrecognized words with proper Vietnamese diacritics
      Object.keys(diacriticsMap).forEach(key => {
        // Check if the word appears as a whole word (with word boundaries)
        const regex = new RegExp(`\\b${key}\\b`, 'gi');
        processedText = processedText.replace(regex, diacriticsMap[key]);
      });
      
      // Special handling for common sports-related phrases
      if (processedText.toLowerCase().includes('them tran') || processedText.toLowerCase().includes('th√™m tr√¢n')) {
        processedText = processedText.replace(/them tran|th√™m tr√¢n/gi, 'th√™m tr·∫≠n');
      }
      
      if (processedText.toLowerCase().includes('thi dau')) {
        processedText = processedText.replace(/thi dau/gi, 'thi ƒë·∫•u');
      }
      
      // More contextual fixes for football terms
      if (processedText.toLowerCase().includes('ban thang')) {
        processedText = processedText.replace(/ban thang/gi, 'b√†n th·∫Øng');
      }
      
      if (processedText.toLowerCase().includes('tap am')) {
        processedText = processedText.replace(/tap am/gi, 't·∫°p √¢m');
      }
      
      return processedText.trim();
    } else {
      // English processing
      const processedText = text
        .replace(/(^\s*\w|[.!?]\s*\w)/g, match => match.toUpperCase()) // Capitalize first letter of sentences
        .replace(/\s+([.,;:!?])/g, '$1') // Fix spacing before punctuation
        .replace(/([.,;:!?])\s+/g, '$1 ') // Fix spacing after punctuation
        .replace(/\s+/g, ' '); // Remove extra spaces
      
      return processedText.trim();
    }
  };

  // Update toggleListening function to include language detection and noise reduction
  const toggleListening = (inputType: 'sidebar' | 'dialog') => {
    if (isListening) {
      // Stop listening
      if (recognitionRef.current) {
        recognitionRef.current.stop();
        recognitionRef.current = null;
      }
      
      // Clear any pending timeouts
      if (recognitionTimeoutRef.current) {
        clearTimeout(recognitionTimeoutRef.current);
        recognitionTimeoutRef.current = null;
      }
      
      setIsListening(false);
      transcriptsRef.current = [];
      setDetectedLanguage(null);
      return;
    }

    // Reset error state when starting new recognition
    setRecognitionError(null);
    setSpeechConfidence(0);
    transcriptsRef.current = [];
    setDetectedLanguage(null);
    
    // Start listening
    try {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      if (!SpeechRecognition) {
        setRecognitionError("Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ nh·∫≠n d·∫°ng gi·ªçng n√≥i");
        return;
      }
      
      const recognition = new SpeechRecognition();
      
      // Enhanced recognition settings for better accuracy
      recognition.lang = selectedLanguage; // Use selected language
      recognition.continuous = true;
      recognition.interimResults = true;
      recognition.maxAlternatives = advancedRecognition ? 5 : 1; // Increased from 3 to 5 for better alternates
      
      // Set a listening timeout for session management
      if (advancedRecognition) {
        recognitionTimeoutRef.current = setTimeout(() => {
          if (recognitionRef.current) {
            // Restart recognition for continuous listening with longer context
            recognitionRef.current.stop();
            // Small delay before restarting
            setTimeout(() => {
              if (isListening) toggleListening(inputType);
            }, 300);
          }
        }, 15000);
      }
      
      recognition.onresult = (event: any) => {
        let interimTranscript = '';
        let finalTranscript = '';
        let highestConfidence = 0;
        let bestAlternativeText = '';
        
        // Process results, looking for both interim and final
        for (let i = event.resultIndex; i < event.results.length; i++) {
          const result = event.results[i];
          
          // Check if we have detected a language different from current setting
          if (result.length > 0 && autoLanguageDetection && result[0].transcript) {
            const detectedLang = detectLanguage(result[0].transcript);
            
            // Switch language if detected different from current
            if (detectedLang && 
               ((detectedLang === 'en' && selectedLanguage !== 'en-US') || 
                (detectedLang === 'vi' && selectedLanguage !== 'vi-VN'))) {
              
              // Set new language
              const newLang = detectedLang === 'en' ? 'en-US' : 'vi-VN';
              setSelectedLanguage(newLang);
              
              // Restart recognition with new language after this batch completes
              setTimeout(() => {
                if (isListening) {
                  if (recognitionRef.current) {
                    recognitionRef.current.stop();
                  }
                  setTimeout(() => toggleListening(inputType), 300);
                }
              }, 1000);
            }
          }
          
          // Check if this is a final result
          if (result.isFinal) {
            if (advancedRecognition && result.length > 1) {
              // If we have alternatives, find the one with highest confidence
              for (let j = 0; j < result.length; j++) {
                if (result[j].confidence > highestConfidence) {
                  highestConfidence = result[j].confidence;
                  bestAlternativeText = result[j].transcript;
                }
              }
              // Use the best alternative if confidence is high enough
              if (highestConfidence > 0.7) {
                finalTranscript += bestAlternativeText + ' ';
              } else {
                finalTranscript += result[0].transcript + ' ';
              }
            } else {
              finalTranscript += result[0].transcript + ' ';
            }
            
            // Store confidence for feedback
            if (result[0].confidence) {
              setSpeechConfidence(Math.round(result[0].confidence * 100));
            }
            
            // Add to transcript history for context
            transcriptsRef.current.push(finalTranscript);
            
            // Keep a maximum of 3 last sentences for context (avoiding too long context)
            if (transcriptsRef.current.length > 3) {
              transcriptsRef.current = transcriptsRef.current.slice(-3);
            }
          } else {
            // For interim results, just display them as-is
            interimTranscript += result[0].transcript + ' ';
          }
        }
        
        // Create final output by combining all transcripts (for context)
        let outputText = transcriptsRef.current.join(' ');
        
        // Add current interim transcript if available
        if (interimTranscript) {
          outputText += ' ' + interimTranscript;
        }
        
        // Check for language to apply appropriate processing
        const langHint = selectedLanguage.startsWith('vi') ? 'vi' : 'en';
        
        // Apply intelligent text processing if we have text
        if (outputText.trim()) {
          outputText = processTranscribedText(outputText, langHint);
        }
        
        // Gi·ªõi h·∫°n ƒë·ªô d√†i vƒÉn b·∫£n
        if (outputText.length > 500) {
          outputText = outputText.substring(0, 500);
        }
        
        // Update the appropriate input field
        if (inputType === 'sidebar') {
          setAiQuestion(outputText);
        } else {
          setChatDialogQuestion(outputText);
        }
      };
      
      // Other event handlers... (keep existing ones)
      
      // Start the recognition
      recognition.start();
      recognitionRef.current = recognition;
      setIsListening(true);
    } catch (error) {
      console.error('Speech recognition failed:', error);
      setRecognitionError("Kh√¥ng th·ªÉ kh·ªüi t·∫°o nh·∫≠n d·∫°ng gi·ªçng n√≥i. Vui l√≤ng ki·ªÉm tra tr√¨nh duy·ªát c·ªßa b·∫°n.");
      setIsListening(false);
    }
  };

  const handleAddMatch = () => {
    setEditingMatch({
      ...newMatchTemplate,
      id: `match-${Date.now()}`,
    })
    setIsDialogOpen(true)
  }

  const handleEditMatch = (match: Match) => {
    setEditingMatch(match)
    setIsDialogOpen(true)
  }

  const handleSaveMatch = () => {
    if (!editingMatch) return

    if (matches.some((match) => match.id === editingMatch.id)) {
      onUpdateMatch(editingMatch)
    } else {
      onAddMatch(editingMatch)
    }

    setIsDialogOpen(false)
    setEditingMatch(null)
  }

  const handleDeleteMatch = (id: string) => {
    setMatchIdToDelete(id)
    setIsDeleteDialogOpen(true)
  }

  const confirmDeleteMatch = () => {
    if (matchIdToDelete) {
      onDeleteMatch(matchIdToDelete)
      setMatchIdToDelete(null)
    }
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString("vi-VN", {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
    })
  }

  const filteredMatches = matches.filter((match) => {
    if (filter === "all") return true
    if (filter === "upcoming") return !match.completed
    if (filter === "completed") return match.completed
    return true
  })

  // S·∫Øp x·∫øp tr·∫≠n ƒë·∫•u: tr·∫≠n s·∫Øp t·ªõi l√™n ƒë·∫ßu, tr·∫≠n ƒë√£ ho√†n th√†nh xu·ªëng cu·ªëi
  const sortedMatches = [...filteredMatches].sort((a, b) => {
    if (a.completed && !b.completed) return 1
    if (!a.completed && b.completed) return -1
    return new Date(a.date).getTime() - new Date(b.date).getTime()
  })

  // Handle file upload
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target?.files?.[0];
    if (!file) return;
    
    // Check if file is an image
    if (!file.type.startsWith('image/')) {
      alert('Vui l√≤ng t·∫£i l√™n t·ªáp h√¨nh ·∫£nh');
      return;
    }
    
    setImageFile(file);
    
    // Create a preview URL
    const reader = new FileReader();
    reader.onload = (event) => {
      setUploadedImage(event.target?.result as string);
    };
    reader.readAsDataURL(file);
  };
  
  const handleRemoveImage = () => {
    setUploadedImage(null);
    setImageFile(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  // Function to add a reaction to a message
  const addReaction = (messageId: string, emoji: string) => {
    setChatMessages(prevMessages => 
      prevMessages.map(msg => {
        if (msg.id === messageId) {
          const oldReactions = msg.reactions || {};
          const reactions = { ...oldReactions };
          if (reactions[emoji]) {
            // Increment existing reaction count
            reactions[emoji] = {
              ...reactions[emoji],
              count: reactions[emoji].count + 1,
              users: [...reactions[emoji].users, 'current-user'],
              timestamp: Date.now() // Update timestamp for animation
            };
          } else {
            // Add new reaction
            reactions[emoji] = {
              emoji,
              count: 1,
              users: ['current-user'],
              timestamp: Date.now()
            };
          }
          
          return {
            ...msg,
            reactions
          };
        }
        return msg;
      })
    );
    
    // Close emoji picker
    setShowingEmojiFor(null);
  };

  // Generate a unique ID for messages
  const generateMessageId = () => `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

  // Add a function to help extract match information from natural language
  const extractMatchInfo = (text: string): Partial<Match> => {
    const matchInfo: Partial<Match> = {};
    
    // Simple pattern matching for common formats
    // Example: "Th√™m tr·∫≠n ƒë·∫•u gi·ªØa Arsenal v√† Chelsea v√†o ng√†y 15/10/2023 l√∫c 19:30 t·∫°i Emirates Stadium trong gi·∫£i Ngo·∫°i h·∫°ng Anh"
    
    // Extract team names
    const teamPattern = /gi·ªØa\s+([^\s]+(?:\s+[^\s]+)*)\s+(?:v√†|vs|g·∫∑p)\s+([^\s]+(?:\s+[^\s]+)*)/i;
    const teamMatch = text.match(teamPattern);
    if (teamMatch) {
      let homeTeam = teamMatch[1].trim();
      let awayTeam = teamMatch[2].trim();
      
      // Lo·∫°i b·ªè ph·∫ßn th√¥ng tin ng√†y, th·ªùi gian, ƒë·ªãa ƒëi·ªÉm kh·ªèi t√™n ƒë·ªôi (n·∫øu c√≥)
      const cleanPatterns = [
        /\s+v√†o\s+ng√†y.*/i,
        /\s+ng√†y.*/i,
        /\s+l√∫c.*/i,
        /\s+t·∫°i.*/i,
        /\s+·ªü.*/i,
        /\s+trong.*/i,
        /\s+thu·ªôc.*/i,
      ];
      
      for (const pattern of cleanPatterns) {
        homeTeam = homeTeam.replace(pattern, '');
        awayTeam = awayTeam.replace(pattern, '');
      }
      
      matchInfo.homeTeam = homeTeam;
      matchInfo.awayTeam = awayTeam;
    }
    
    // Extract date (support multiple formats)
    const datePatterns = [
      /ng√†y\s+(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/i, // ng√†y DD/MM/YYYY
      /ng√†y\s+(\d{1,2})[\/\-](\d{1,2})/i, // ng√†y DD/MM (current year)
    ];
    
    for (const pattern of datePatterns) {
      const dateMatch = text.match(pattern);
      if (dateMatch) {
        if (dateMatch.length === 4) {
          // DD/MM/YYYY format
          const day = dateMatch[1].padStart(2, '0');
          const month = dateMatch[2].padStart(2, '0');
          const year = dateMatch[3];
          matchInfo.date = `${year}-${month}-${day}`;
        } else {
          // DD/MM format (use current year)
          const day = dateMatch[1].padStart(2, '0');
          const month = dateMatch[2].padStart(2, '0');
          const year = new Date().getFullYear();
          matchInfo.date = `${year}-${month}-${day}`;
        }
        break;
      }
    }
    
    // Extract time
    const timePattern = /(?:l√∫c|gi·ªù)\s+(\d{1,2})[h:](\d{1,2})?/i;
    const timeMatch = text.match(timePattern);
    if (timeMatch) {
      const hours = timeMatch[1].padStart(2, '0');
      const minutes = (timeMatch[2] || "00").padStart(2, '0');
      matchInfo.time = `${hours}:${minutes}`;
    }
    
    // Extract venue
    const venuePatterns = [
      /(?:t·∫°i|·ªü)\s+([^\.,]+)(?:,|\.|trong)/i,
      /(?:t·∫°i|·ªü)\s+([^\.,]+)$/i,
    ];
    
    for (const pattern of venuePatterns) {
      const venueMatch = text.match(pattern);
      if (venueMatch) {
        matchInfo.venue = venueMatch[1].trim();
        break;
      }
    }
    
    // Extract competition
    const competitionPatterns = [
      /(?:trong|thu·ªôc)\s+(?:gi·∫£i|khu√¥n kh·ªï)\s+([^\.,]+)(?:,|\.)/i,
      /(?:trong|thu·ªôc)\s+(?:gi·∫£i|khu√¥n kh·ªï)\s+([^\.,]+)$/i,
      /(?:gi·∫£i|khu√¥n kh·ªï)\s+([^\.,]+)(?:,|\.)/i,
      /(?:gi·∫£i|khu√¥n kh·ªï)\s+([^\.,]+)$/i,
    ];
    
    for (const pattern of competitionPatterns) {
      const competitionMatch = text.match(pattern);
      if (competitionMatch) {
        matchInfo.competition = competitionMatch[1].trim();
        break;
      }
    }
    
    // Extract score for home team
    const homeScorePatterns = [
      /(?:ƒë·ªôi nh√†|ƒë·ªôi 1)\s+(?:ghi ƒë∆∞·ª£c|ƒë·∫°t|ghi|th·∫Øng|ƒë∆∞·ª£c)\s+(\d+)(?:\s+b√†n|\s+ƒëi·ªÉm|\s+b√†n th·∫Øng)?/i,
      /(?:t·ªâ s·ªë|t·ª∑ s·ªë|k·∫øt qu·∫£)\s+(\d+)(?:\s*[\-:])\s*\d+/i,
      /(\d+)(?:\s*[\-:])\s*\d+\s+(?:cho|l√† t·ªâ s·ªë c·ªßa|l√† k·∫øt qu·∫£)/i,
    ];
    
    for (const pattern of homeScorePatterns) {
      const scoreMatch = text.match(pattern);
      if (scoreMatch) {
        matchInfo.homeScore = parseInt(scoreMatch[1], 10);
        // N·∫øu c√≥ ƒëi·ªÉm s·ªë, ƒë√°nh d·∫•u tr·∫≠n ƒë·∫•u ƒë√£ k·∫øt th√∫c
        matchInfo.completed = true;
        break;
      }
    }
    
    // Extract score for away team
    const awayScorePatterns = [
      /(?:ƒë·ªôi kh√°ch|ƒë·ªôi 2)\s+(?:ghi ƒë∆∞·ª£c|ƒë·∫°t|ghi|th·∫Øng|ƒë∆∞·ª£c)\s+(\d+)(?:\s+b√†n|\s+ƒëi·ªÉm|\s+b√†n th·∫Øng)?/i,
      /(?:t·ªâ s·ªë|t·ª∑ s·ªë|k·∫øt qu·∫£)\s+\d+(?:\s*[\-:])\s*(\d+)/i,
      /\d+(?:\s*[\-:])\s*(\d+)\s+(?:cho|l√† t·ªâ s·ªë c·ªßa|l√† k·∫øt qu·∫£)/i,
    ];
    
    for (const pattern of awayScorePatterns) {
      const scoreMatch = text.match(pattern);
      if (scoreMatch) {
        matchInfo.awayScore = parseInt(scoreMatch[1], 10);
        // N·∫øu c√≥ ƒëi·ªÉm s·ªë, ƒë√°nh d·∫•u tr·∫≠n ƒë·∫•u ƒë√£ k·∫øt th√∫c
        matchInfo.completed = true;
        break;
      }
    }
    
    // Extract notes
    const notesPatterns = [
      /ghi ch√∫(?:\s*[:]\s*)["']([^"']+)["']/i,
      /ghi ch√∫(?:\s*[:]\s*)([^.,]+)(?:,|\.|\n|$)/i,
      /ch√∫ th√≠ch(?:\s*[:]\s*)["']([^"']+)["']/i,
      /ch√∫ th√≠ch(?:\s*[:]\s*)([^.,]+)(?:,|\.|\n|$)/i,
    ];
    
    for (const pattern of notesPatterns) {
      const notesMatch = text.match(pattern);
      if (notesMatch) {
        matchInfo.notes = notesMatch[1].trim();
        break;
      }
    }
    
    return matchInfo;
  };

  // Parse agent action from AI response
  const parseAgentAction = (aiText: string): { text: string, action: AgentAction } => {
    const actionPattern = /\[ACTION:([^]]+)\]/;
    const match = aiText.match(actionPattern);
    
    if (!match) {
      return { text: aiText, action: { type: 'NONE' } };
    }
    
    try {
      const actionJson = match[1].trim();
      const action = JSON.parse(actionJson) as AgentAction;
      
      // Remove the action part from the text
      const cleanedText = aiText.replace(actionPattern, '').trim();
      
      return { text: cleanedText, action };
    } catch (e) {
      console.error("Error parsing agent action:", e);
      return { text: aiText, action: { type: 'NONE' } };
    }
  };

  const getActionDescription = (action: AgentAction): string => {
    switch (action.type) {
      case 'ADD_MATCH':
        let description = `Th√™m tr·∫≠n ƒë·∫•u ${action.match.homeTeam} vs ${action.match.awayTeam}`;
        if (action.match.completed && action.match.homeScore !== undefined && action.match.awayScore !== undefined) {
          description += ` (${action.match.homeScore}-${action.match.awayScore})`;
        }
        return description;
      case 'FILTER_MATCHES':
        return `L·ªçc tr·∫≠n ƒë·∫•u ${
          action.filter === 'upcoming' ? 's·∫Øp di·ªÖn ra' : 
          action.filter === 'completed' ? 'ƒë√£ k·∫øt th√∫c' : 't·∫•t c·∫£'
        }`;
      case 'FIND_MATCH':
        return `T√¨m ki·∫øm tr·∫≠n ƒë·∫•u "${action.criteria}"`;
      case 'NONE':
        return 'Kh√¥ng c√≥ h√†nh ƒë·ªông';
    }
  };

  // Agent Action Executors
  const executeAgentAction = (action: AgentAction) => {
    if (action.type === 'NONE') return;
    
    const actionMessageId = generateMessageId();
    const actionMessage = {
      role: 'agent' as const,
      content: `‚ö° ƒêang th·ª±c hi·ªán h√†nh ƒë·ªông: ${getActionDescription(action)}`,
      id: actionMessageId
    };
    
    setChatMessages(prev => [...prev, actionMessage]);
    
    // Execute different actions based on type
    switch (action.type) {
      case 'ADD_MATCH':
        // Create a complete match object with all required fields
        const newMatch = {
          ...newMatchTemplate,
          id: `match-${Date.now()}`,
          ...action.match,
          // Set default values for any missing fields
          homeTeam: action.match.homeTeam || "",
          awayTeam: action.match.awayTeam || "",
          date: action.match.date || new Date().toISOString().split("T")[0],
          time: action.match.time || "19:00",
          venue: action.match.venue || "",
          competition: action.match.competition || "V-League",
          completed: action.match.completed || false,
        };
        
        // Automatically add the match
        onAddMatch(newMatch as Match);
        
        const resultMessageId = generateMessageId();
        setChatMessages(prev => [
          ...prev, 
          { 
            role: 'agent', 
            content: `‚úÖ ƒê√£ th√™m tr·∫≠n ƒë·∫•u m·ªõi:\n\n${newMatch.homeTeam} VS ${newMatch.awayTeam}\n\nV√†o ng√†y: ${formatDate(newMatch.date)}${newMatch.completed ? `\nK·∫øt qu·∫£: ${newMatch.homeScore || 0}-${newMatch.awayScore || 0}` : ''}${newMatch.notes ? `\nGhi ch√∫: ${newMatch.notes}` : ''}`,
            id: resultMessageId
          }
        ]);
        break;
        
      case 'FILTER_MATCHES':
        if (action.filter === 'upcoming') {
          setFilter('upcoming');
        } else if (action.filter === 'completed') {
          setFilter('completed');
        } else {
          setFilter('all');
        }
        
        const filterMessageId = generateMessageId();
        setChatMessages(prev => [
          ...prev, 
          { 
            role: 'agent', 
            content: `‚úÖ ƒê√£ l·ªçc danh s√°ch tr·∫≠n ƒë·∫•u: ${
              action.filter === 'upcoming' ? 'S·∫Øp di·ªÖn ra' : 
              action.filter === 'completed' ? 'ƒê√£ k·∫øt th√∫c' : 'T·∫•t c·∫£'
            }`,
            id: filterMessageId
          }
        ]);
        break;
        
      case 'FIND_MATCH':
        const searchTerm = action.criteria.toLowerCase();
        const foundMatches = matches.filter(match => 
          match.homeTeam.toLowerCase().includes(searchTerm) ||
          match.awayTeam.toLowerCase().includes(searchTerm) ||
          match.competition.toLowerCase().includes(searchTerm) ||
          match.venue.toLowerCase().includes(searchTerm)
        );
        
        const findMessageId = generateMessageId();
        if (foundMatches.length > 0) {
          const matchesInfo = foundMatches.map(match => 
            `‚Ä¢ ${match.homeTeam} VS ${match.awayTeam}\n  Ng√†y: ${formatDate(match.date)}  |  ƒê·ªãa ƒëi·ªÉm: ${match.venue}`
          ).join('\n\n');
          
          setChatMessages(prev => [
            ...prev, 
            { 
              role: 'agent', 
              content: `üîç T√¨m th·∫•y ${foundMatches.length} tr·∫≠n ƒë·∫•u:\n\n${matchesInfo}`,
              id: findMessageId
            }
          ]);
        } else {
          setChatMessages(prev => [
            ...prev, 
            { 
              role: 'agent', 
              content: `‚ùå Kh√¥ng t√¨m th·∫•y tr·∫≠n ƒë·∫•u n√†o ph√π h·ª£p v·ªõi "${action.criteria}"`, 
              id: findMessageId
            }
          ]);
        }
        break;
    }
    
    setPendingAgentAction(null);
  };

  // AI chat function
  const askAI = async () => {
    if (!aiQuestion.trim() && !uploadedImage) return;
    
    // Add user message to chat history
    const userMessage = aiQuestion.trim();
    const userMessageId = generateMessageId();
    
    setChatMessages(prev => [...prev, {
      role: 'user', 
      content: userMessage || (uploadedImage ? '[ƒê√£ g·ª≠i m·ªôt h√¨nh ·∫£nh]' : ''),
      id: userMessageId
    }]);
    
    // Check for founder question
    const founderQuestions = [
      'ng∆∞·ªùi s√°ng l·∫≠p', 
      'ai s√°ng l·∫≠p', 
      'founder', 
      'ng∆∞·ªùi t·∫°o ra', 
      'ai t·∫°o ra', 
      'ai l√†m ra', 
      'ng∆∞·ªùi ph√°t tri·ªÉn', 
      'ai ph√°t tri·ªÉn'
    ];
    
    if (founderQuestions.some(q => userMessage.toLowerCase().includes(q))) {
      const founderResponse = `ƒê√¢y l√† ph·∫ßn m·ªÅm qu·∫£n l√Ω ƒë·ªôi b√≥ng do m·ªôt nh√≥m sinh vi√™n kƒ© thu·∫≠t c·ªßa c√°c tr∆∞·ªùng nh∆∞ <b>HCMUT</b>, <b>UIT</b>, <b>SGU</b> c√πng ph√°t tri·ªÉn. Ng∆∞·ªùi ƒë·ª©ng ƒë·∫ßu d·ª± √°n (CO-Founder) l√† <b>L√ä NG·ªåC GI√ÄU</b>, <b>NGUY·ªÑN HO√ÄNG NAM</b>, <b>TR·∫¶N C√îNG MINH</b>,... ƒë√¢y l√† nh·ªØng ng∆∞·ªùi th·ª±c hi·ªán code v√† ph√°t tri·ªÉn √Ω t∆∞·ªüng d·ª± √°n.`;
      
      const aiMessageId = generateMessageId();
      setChatMessages(prev => [...prev, { 
        role: 'ai', 
        content: founderResponse,
        id: aiMessageId
      }]);
      
      // Speak the AI response
      speakText(founderResponse);
      
      // Clear input after sending
      setAiQuestion("");
      handleRemoveImage();
      return;
    }
    
    // First check if the message directly asks to add a match
    if (userMessage.toLowerCase().includes('th√™m tr·∫≠n') || 
        userMessage.toLowerCase().includes('t·∫°o tr·∫≠n') || 
        userMessage.includes('ƒë·∫∑t l·ªãch tr·∫≠n')) {
      
      // Try to extract match information directly from the prompt
      const matchInfo = extractMatchInfo(userMessage);
      
      // If we have at least home team and away team, suggest adding the match
      if (matchInfo.homeTeam && matchInfo.awayTeam) {
        const action: AgentAction = {
          type: 'ADD_MATCH',
          match: matchInfo
        };
        
        // Add a system message confirming the extracted info with ID
        const agentMessageId = generateMessageId();
        
        setChatMessages(prev => 
          [...prev, {
            role: 'agent',
            content: `ü§ñ T√¥i ƒë√£ hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n mu·ªën th√™m tr·∫≠n ƒë·∫•u:

${matchInfo.homeTeam} VS ${matchInfo.awayTeam}

Th√¥ng tin chi ti·∫øt:${matchInfo.date ? `
‚Ä¢ Ng√†y thi ƒë·∫•u: ${matchInfo.date}` : ''}${matchInfo.time ? `
‚Ä¢ Gi·ªù thi ƒë·∫•u: ${matchInfo.time}` : ''}${matchInfo.venue ? `
‚Ä¢ ƒê·ªãa ƒëi·ªÉm: ${matchInfo.venue}` : ''}${matchInfo.competition ? `
‚Ä¢ Gi·∫£i ƒë·∫•u: ${matchInfo.competition}` : ''}${matchInfo.completed ? `
‚Ä¢ Tr·∫°ng th√°i: ƒê√£ k·∫øt th√∫c${matchInfo.homeScore !== undefined && matchInfo.awayScore !== undefined ? ` (T·ªâ s·ªë: ${matchInfo.homeScore}-${matchInfo.awayScore})` : ''}` : ''}${matchInfo.notes ? `
‚Ä¢ Ghi ch√∫: ${matchInfo.notes}` : ''}

Vui l√≤ng x√°c nh·∫≠n b·∫±ng n√∫t b√™n d∆∞·ªõi.`,
            id: agentMessageId
          }]
        );
        
        setPendingAgentAction(action);
        setAiQuestion("");
        handleRemoveImage();
        return;
      }
    }
    
    // Check if user message contains a direct action command
    if (userMessage.includes('[ACTION:')) {
      try {
        const { action } = parseAgentAction(userMessage);
        if (action.type !== 'NONE') {
          // Add a clear system message about detected action
          const actionMessageId = generateMessageId();
          setChatMessages(prev => [...prev, {
            role: 'agent',
            content: `ü§ñ ƒê√£ ph√°t hi·ªán l·ªánh th·ª±c hi·ªán: "${getActionDescription(action)}"\n\nVui l√≤ng x√°c nh·∫≠n b·∫±ng n√∫t b√™n d∆∞·ªõi.`,
            id: actionMessageId
          }]);
          
          setPendingAgentAction(action);
          setAiQuestion("");
          handleRemoveImage();
          return;
        }
      } catch (error) {
        console.error("Failed to parse direct action:", error);
        // Show error message if parsing failed
        const errorMessageId = generateMessageId();
        setChatMessages(prev => [...prev, {
          role: 'agent',
          content: `‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch l·ªánh. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng JSON.`,
          id: errorMessageId
        }]);
      }
    }
    
    // Check if message starts with '@' - handle as general knowledge question
    if (userMessage.startsWith('@')) {
      const generalQuestion = userMessage.substring(1).trim(); // Remove @ prefix
      
      setIsAiLoading(true);
      
      try {
        const response = await fetch(
          `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              contents: [{
                parts: [{ text: generalQuestion }]
              }]
            }),
          }
        );
        
        if (!response.ok) {
          throw new Error(`API request failed with status ${response.status}`);
        }
        
        const data = await response.json();
        const aiResponse = data.candidates?.[0]?.content?.parts?.[0]?.text || "Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI.";
        
        // Add AI response to chat history
        const aiMessageId = generateMessageId();
        setChatMessages(prev => [...prev, { 
          role: 'ai', 
          content: aiResponse,
          id: aiMessageId
        }]);
        
        // Speak the AI response
        speakText(aiResponse);
        
        // Clear input after sending
        setAiQuestion("");
        handleRemoveImage();
        
      } catch (error) {
        console.error("Error querying AI:", error);
        const errorMessageId = generateMessageId();
        setChatMessages(prev => [...prev, { 
          role: 'ai', 
          content: "ƒê√£ x·∫£y ra l·ªói khi t∆∞∆°ng t√°c v·ªõi AI. Vui l√≤ng th·ª≠ l·∫°i sau.",
          id: errorMessageId
        }]);
      } finally {
        setIsAiLoading(false);
      }
      return;
    }
    
    setIsAiLoading(true);
    
    try {
      // Create context from matches data
      const matchesContext = matches.map(match => 
        `${match.homeTeam} vs ${match.awayTeam} - ${formatDate(match.date)} at ${match.time}, ${match.venue}, ${match.competition}${
          match.completed ? `, Score: ${match.homeScore}-${match.awayScore}` : ""
        }`
      ).join("\n");

      // Describe agent capabilities
      const agentCapabilities = `
B·∫°n l√† m·ªôt AI Agent c√≥ kh·∫£ nƒÉng kh√¥ng ch·ªâ tr·∫£ l·ªùi c√¢u h·ªèi m√† c√≤n th·ª±c hi·ªán c√°c h√†nh ƒë·ªông sau:
1. Th√™m tr·∫≠n ƒë·∫•u m·ªõi (ADD_MATCH): Khi ng∆∞·ªùi d√πng y√™u c·∫ßu th√™m tr·∫≠n ƒë·∫•u, b·∫°n c√≥ th·ªÉ t·∫°o m·ªôt tr·∫≠n ƒë·∫•u m·ªõi
2. L·ªçc danh s√°ch tr·∫≠n ƒë·∫•u (FILTER_MATCHES): Hi·ªÉn th·ªã c√°c tr·∫≠n s·∫Øp t·ªõi, ƒë√£ k·∫øt th√∫c, ho·∫∑c t·∫•t c·∫£
3. T√¨m ki·∫øm tr·∫≠n ƒë·∫•u (FIND_MATCH): T√¨m tr·∫≠n ƒë·∫•u d·ª±a theo ƒë·ªôi b√≥ng, gi·∫£i ƒë·∫•u, ƒë·ªãa ƒëi·ªÉm...

N·∫øu y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng li√™n quan ƒë·∫øn m·ªôt trong c√°c h√†nh ƒë·ªông tr√™n, h√£y tr·∫£ l·ªùi v√† th√™m c√∫ ph√°p JSON ƒë·∫∑c bi·ªát:
[ACTION:{"type":"ACTION_TYPE",...chi ti·∫øt action}]

V√≠ d·ª•: 
- N·∫øu ng∆∞·ªùi d√πng mu·ªën th√™m tr·∫≠n ƒë·∫•u gi·ªØa MU v√† Chelsea ng√†y 15/09/2023:
[ACTION:{"type":"ADD_MATCH","match":{"homeTeam":"MU","awayTeam":"Chelsea","date":"2023-09-15","venue":"Old Trafford","competition":"Ngo·∫°i h·∫°ng Anh"}}]

- N·∫øu ng∆∞·ªùi d√πng mu·ªën xem c√°c tr·∫≠n s·∫Øp di·ªÖn ra:
[ACTION:{"type":"FILTER_MATCHES","filter":"upcoming"}]

- N·∫øu ng∆∞·ªùi d√πng mu·ªën t√¨m tr·∫≠n ƒë·∫•u v·ªõi Man City:
[ACTION:{"type":"FIND_MATCH","criteria":"Man City"}]

Vi·ªác c·ªßa b·∫°n l√† hi·ªÉu √Ω ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng v√† th·ª±c hi·ªán ƒë√∫ng h√†nh ƒë·ªông t∆∞∆°ng ·ª©ng.
      `;
      
      let requestBody: any = {
        contents: [{
          parts: []
        }]
      };
      
      // Add text if provided
      if (userMessage) {
        const prompt = `Th√¥ng tin v·ªÅ c√°c tr·∫≠n ƒë·∫•u:\n${matchesContext}\n\n${agentCapabilities}\n\nC√¢u h·ªèi: ${userMessage}`;
        requestBody.contents[0].parts.push({ text: prompt });
      }
      
      // Add image if provided
      if (imageFile) {
        const imageBase64 = uploadedImage?.split(',')[1];
        if (imageBase64) {
          requestBody.contents[0].parts.push({
            inline_data: {
              mime_type: imageFile.type,
              data: imageBase64
            }
          });
          
          // Add specific prompt for image analysis if no text was provided
          if (!userMessage) {
            requestBody.contents[0].parts.push({ 
              text: `${agentCapabilities}\n\nH√£y ph√¢n t√≠ch h√¨nh ·∫£nh n√†y v√† m√¥ t·∫£ nh·ªØng g√¨ b·∫°n th·∫•y li√™n quan ƒë·∫øn b√≥ng ƒë√° ho·∫∑c th·ªÉ thao.`
            });
          }
        }
      }
      
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(requestBody),
        }
      );
      
      if (!response.ok) {
        throw new Error(`API request failed with status ${response.status}`);
      }
      
      const data = await response.json();
      const rawAiText = data.candidates?.[0]?.content?.parts?.[0]?.text || "Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI.";
      
      // Parse agent actions
      const { text: aiText, action } = parseAgentAction(rawAiText);
      
      // Add AI response to chat history
      const aiMessageId = generateMessageId();
      setChatMessages(prev => [...prev, { 
        role: 'ai', 
        content: aiText,
        id: aiMessageId
      }]);
      
      // Speak the AI response
      speakText(aiText);
      
      // Handle agent action if present
      if (action.type !== 'NONE') {
        setPendingAgentAction(action);
      }
      
      // Clear input and image after sending
      setAiQuestion("");
      handleRemoveImage();
      
    } catch (error) {
      console.error("Error querying AI:", error);
      const errorMessageId = generateMessageId();
      setChatMessages(prev => [...prev, { 
        role: 'ai', 
        content: "ƒê√£ x·∫£y ra l·ªói khi t∆∞∆°ng t√°c v·ªõi AI. Vui l√≤ng th·ª≠ l·∫°i sau.",
        id: errorMessageId
      }]);
    } finally {
      setIsAiLoading(false);
    }
  };

  // Toggle AI sidebar visibility
  const toggleAiSidebar = () => {
    setShowAiSidebar(!showAiSidebar);
    if (!showAiSidebar) {
      setAiQuestion("");
      setUploadedImage(null);
      setImageFile(null);
    }
  };

  // Add handleChatDialogQuestion function to handle chat requests from the dialog
  const handleChatDialogQuestion = async () => {
    if (!chatDialogQuestion.trim()) return;
    
    let apiKeyToUse = useCustomApiKey ? customApiKey : GEMINI_API_KEY;
    
    if (!apiKeyToUse) {
      alert("Vui l√≤ng nh·∫≠p API key ho·∫∑c s·ª≠ d·ª•ng API key m·∫∑c ƒë·ªãnh");
      return;
    }
    
    // Add user message to chat history
    const userMessage = chatDialogQuestion.trim();
    const userMessageId = generateMessageId();
    
    setChatMessages(prev => [...prev, {
      role: 'user',
      content: userMessage,
      id: userMessageId
    }]);
    
    // Check for founder question
    const founderQuestions = [
      'ng∆∞·ªùi s√°ng l·∫≠p', 
      'ai s√°ng l·∫≠p', 
      'founder', 
      'ng∆∞·ªùi t·∫°o ra', 
      'ai t·∫°o ra', 
      'ai l√†m ra', 
      'ng∆∞·ªùi ph√°t tri·ªÉn', 
      'ai ph√°t tri·ªÉn'
    ];
    
    if (founderQuestions.some(q => userMessage.toLowerCase().includes(q))) {
      const founderResponse = `ƒê√¢y l√† ph·∫ßn m·ªÅm qu·∫£n l√Ω ƒë·ªôi b√≥ng do m·ªôt nh√≥m sinh vi√™n kƒ© thu·∫≠t c·ªßa c√°c tr∆∞·ªùng nh∆∞ <b>HCMUT</b>, <b>UIT</b>, <b>SGU</b> c√πng ph√°t tri·ªÉn. Ng∆∞·ªùi ƒë·ª©ng ƒë·∫ßu d·ª± √°n (CO-Founder) l√† <b>L√ä NG·ªåC GI√ÄU</b>, <b>NGUY·ªÑN HO√ÄNG NAM</b>, <b>TR·∫¶N C√îNG MINH</b>,... ƒë√¢y l√† nh·ªØng ng∆∞·ªùi th·ª±c hi·ªán code v√† ph√°t tri·ªÉn √Ω t∆∞·ªüng d·ª± √°n.`;
      
      const aiMessageId = generateMessageId();
      setChatMessages(prev => [...prev, { 
        role: 'ai', 
        content: founderResponse,
        id: aiMessageId
      }]);
      
      // Speak the AI response
      speakText(founderResponse);
      
      // Clear input after sending
      setChatDialogQuestion("");
      return;
    }
    
    setIsAiLoading(true);
    
    try {
      // Check if message starts with '@' - handle as general knowledge question
      if (userMessage.startsWith('@')) {
        const generalQuestion = userMessage.substring(1).trim(); // Remove @ prefix
        
        const response = await fetch(
          `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              contents: [{
                parts: [{ text: generalQuestion }]
              }]
            }),
          }
        );
        
        if (!response.ok) {
          throw new Error(`API request failed with status ${response.status}`);
        }
        
        const data = await response.json();
        const aiResponse = data.candidates?.[0]?.content?.parts?.[0]?.text || "Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI.";
        
        // Add AI response to chat history
        const aiMessageId = generateMessageId();
        setChatMessages(prev => [...prev, { 
          role: 'ai', 
          content: aiResponse,
          id: aiMessageId
        }]);
        
        // Speak the AI response
        speakText(aiResponse);
        
        // Clear input after sending
        setChatDialogQuestion("");
        handleRemoveImage();
        
      } else {
        // Regular app-related question - use the existing functionality
        const response = await fetch(
          `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKeyToUse}`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              contents: [{
                parts: [{ text: userMessage }]
              }]
            }),
          }
        );
        
        if (!response.ok) {
          throw new Error(`API request failed with status ${response.status}`);
        }
        
        const data = await response.json();
        const aiResponse = data.candidates?.[0]?.content?.parts?.[0]?.text || "Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI.";
        
        // Add AI response to chat history
        const aiMessageId = generateMessageId();
        setChatMessages(prev => [...prev, { 
          role: 'ai', 
          content: aiResponse,
          id: aiMessageId
        }]);
        
        // Speak the AI response
        speakText(aiResponse);
      }
      
      // Clear input after sending
      setChatDialogQuestion("");
      
    } catch (error) {
      console.error("Error querying AI:", error);
      const errorMessageId = generateMessageId();
      setChatMessages(prev => [...prev, { 
        role: 'ai', 
        content: "ƒê√£ x·∫£y ra l·ªói khi t∆∞∆°ng t√°c v·ªõi AI. Vui l√≤ng ki·ªÉm tra API key ho·∫∑c th·ª≠ l·∫°i sau.",
        id: errorMessageId
      }]);
    } finally {
      setIsAiLoading(false);
    }
  };

  const handleRateMatch = (match: Match) => {
    setRatingMatch(match)
    setIsRatingDialogOpen(true)
  }
  
  const handleViewEvents = (match: Match) => {
    setEventsMatch(match)
    setIsEventsDialogOpen(true)
  }
  
  const handleSaveRatings = (ratings: PlayerRatingsData) => {
    if (ratingMatch) {
      const updatedMatch = {
        ...ratingMatch,
        playerRatings: ratings
      }
      onUpdateMatch(updatedMatch)
    }
  }
  
  const handleSaveEvents = (events: MatchEventsType, updatedPlayers?: {player: Player, teamId: string}[]) => {
    if (eventsMatch) {
      const updatedMatch = {
        ...eventsMatch,
        events: events
      }
      onUpdateMatch(updatedMatch)
      
      // C·∫≠p nh·∫≠t th√¥ng tin c·∫ßu th·ªß n·∫øu c√≥
      if (updatedPlayers && updatedPlayers.length > 0) {
        // T·∫°o b·∫£n sao ƒë·ªôi nh√† v√† ƒë·ªôi kh√°ch ƒë·ªÉ c·∫≠p nh·∫≠t
        const updatedHomeTeam = {...homeTeam};
        const updatedAwayTeam = {...awayTeam};
        let homeTeamUpdated = false;
        let awayTeamUpdated = false;
        
        // C·∫≠p nh·∫≠t th√¥ng tin cho t·ª´ng c·∫ßu th·ªß
        updatedPlayers.forEach(({ player, teamId }) => {
          if (teamId === homeTeam.id) {
            // C·∫≠p nh·∫≠t c·∫ßu th·ªß trong ƒë·ªôi nh√†
            const playerIndex = updatedHomeTeam.players.findIndex(p => p.id === player.id);
            if (playerIndex !== -1) {
              updatedHomeTeam.players[playerIndex] = {
                ...updatedHomeTeam.players[playerIndex],
                yellowCards: player.yellowCards,
                redCards: player.redCards
              };
              homeTeamUpdated = true;
            }
          } else if (teamId === awayTeam.id) {
            // C·∫≠p nh·∫≠t c·∫ßu th·ªß trong ƒë·ªôi kh√°ch
            const playerIndex = updatedAwayTeam.players.findIndex(p => p.id === player.id);
            if (playerIndex !== -1) {
              updatedAwayTeam.players[playerIndex] = {
                ...updatedAwayTeam.players[playerIndex],
                yellowCards: player.yellowCards,
                redCards: player.redCards
              };
              awayTeamUpdated = true;
            }
          }
        });
        
        // C·∫≠p nh·∫≠t ƒë·ªôi n·∫øu c√≥ thay ƒë·ªïi
        if (homeTeamUpdated && onUpdateHomeTeam) {
          onUpdateHomeTeam(updatedHomeTeam);
        }
        if (awayTeamUpdated && onUpdateAwayTeam) {
          onUpdateAwayTeam(updatedAwayTeam);
        }
      }
      
      setIsEventsDialogOpen(false)
    }
  }

  // Add recognition settings dialog
  const RecognitionSettingsDialog = () => {
    return (
      <Dialog open={isRecognitionSettingsOpen} onOpenChange={setIsRecognitionSettingsOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>C√†i ƒë·∫∑t nh·∫≠n d·∫°ng gi·ªçng n√≥i</DialogTitle>
            <DialogDescription>
              ƒêi·ªÅu ch·ªânh c√°c t√πy ch·ªçn ƒë·ªÉ c·∫£i thi·ªán ƒë·ªô ch√≠nh x√°c c·ªßa nh·∫≠n d·∫°ng gi·ªçng n√≥i
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4 py-4">
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="advanced-recognition">Nh·∫≠n d·∫°ng n√¢ng cao</Label>
                <p className="text-sm text-muted-foreground">
                  S·ª≠ d·ª•ng thu·∫≠t to√°n n√¢ng cao ƒë·ªÉ c·∫£i thi·ªán ƒë·ªô ch√≠nh x√°c
                </p>
              </div>
              <Switch
                id="advanced-recognition"
                checked={advancedRecognition}
                onCheckedChange={setAdvancedRecognition}
              />
            </div>
            
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="noise-reduction">L·ªçc t·∫°p √¢m</Label>
                <p className="text-sm text-muted-foreground">
                  Gi·∫£m ti·∫øng ·ªìn v√† t·∫°p √¢m m√¥i tr∆∞·ªùng
                </p>
              </div>
              <Switch
                id="noise-reduction"
                checked={noiseReduction}
                onCheckedChange={setNoiseReduction}
              />
            </div>
            
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="auto-language">T·ª± ƒë·ªông nh·∫≠n d·∫°ng ng√¥n ng·ªØ</Label>
                <p className="text-sm text-muted-foreground">
                  T·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi gi·ªØa ti·∫øng Vi·ªát v√† ti·∫øng Anh
                </p>
              </div>
              <Switch
                id="auto-language"
                checked={autoLanguageDetection}
                onCheckedChange={setAutoLanguageDetection}
              />
            </div>
            
            <div className="pt-2">
              <Label className="mb-2 block">Ng√¥n ng·ªØ m·∫∑c ƒë·ªãnh</Label>
              <Select 
                value={selectedLanguage}
                onValueChange={setSelectedLanguage}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Ch·ªçn ng√¥n ng·ªØ" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="vi-VN">Ti·∫øng Vi·ªát (Vi·ªát Nam)</SelectItem>
                  <SelectItem value="en-US">English (United States)</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            {speechConfidence > 0 && (
              <div className="pt-2">
                <Label className="mb-2 block">ƒê·ªô tin c·∫≠y nh·∫≠n d·∫°ng g·∫ßn nh·∫•t</Label>
                <div className="h-2 w-full bg-gray-200 rounded-full overflow-hidden">
                  <div 
                    className={`h-full ${
                      speechConfidence > 80 ? 'bg-green-500' : 
                      speechConfidence > 60 ? 'bg-yellow-500' : 'bg-red-500'
                    }`} 
                    style={{width: `${speechConfidence}%`}}
                  ></div>
                </div>
                <p className="text-sm text-right mt-1">{speechConfidence}%</p>
              </div>
            )}
          </div>
          
          <div className="flex justify-end">
            <Button onClick={() => setIsRecognitionSettingsOpen(false)}>
              ƒê√≥ng
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    );
  };

  // Th√™m state ƒë·ªÉ theo d√µi s·ªë k√Ω t·ª±
  const [aiQuestionLength, setAiQuestionLength] = useState(0)
  const [chatDialogQuestionLength, setChatDialogQuestionLength] = useState(0)
  const MAX_PROMPT_LENGTH = 500

  // Component c√†i ƒë·∫∑t gi·ªçng n√≥i
  const VoiceSettingsDialog = () => {
    // Nh√≥m c√°c gi·ªçng n√≥i theo ng√¥n ng·ªØ
    const englishVoices = availableVoices.filter(voice => voice.lang.startsWith('en'))
    const vietnameseVoices = availableVoices.filter(voice => voice.lang.startsWith('vi'))
    
    // X·ª≠ l√Ω thay ƒë·ªïi t·ªëc ƒë·ªô n√≥i
    const handleRateChange = (value: number) => {
      setSpeechRate(value)
    }
    
    // X·ª≠ l√Ω thay ƒë·ªïi cao ƒë·ªô gi·ªçng
    const handlePitchChange = (value: number) => {
      setSpeechPitch(value)
    }
    
    // X·ª≠ l√Ω thay ƒë·ªïi √¢m l∆∞·ª£ng
    const handleVolumeChange = (value: number) => {
      setSpeechVolume(value)
    }
    
    // Ph√°t m·∫´u ƒë·ªÉ ki·ªÉm tra gi·ªçng n√≥i
    const speakSample = (language: 'en' | 'vi') => {
      const sampleText = language === 'en' 
        ? "This is a sample of the English voice. How does it sound to you?" 
        : "ƒê√¢y l√† m·∫´u gi·ªçng n√≥i ti·∫øng Vi·ªát. B·∫°n nghe th·∫•y nh∆∞ th·∫ø n√†o?";
      
      speakText(sampleText)
    }
    
    return (
      <Dialog open={isVoiceSettingsOpen} onOpenChange={setIsVoiceSettingsOpen}>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-auto">
          <DialogHeader>
            <DialogTitle>C√†i ƒë·∫∑t gi·ªçng n√≥i</DialogTitle>
            <DialogDescription>
              ƒêi·ªÅu ch·ªânh c√°c tham s·ªë ƒë·ªÉ c√≥ gi·ªçng n√≥i d·ªÖ nghe nh·∫•t
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-6 py-4">
            {/* C√†i ƒë·∫∑t ch·∫•t l∆∞·ª£ng gi·ªçng n√≥i */}
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="high-quality">S·ª≠ d·ª•ng gi·ªçng ch·∫•t l∆∞·ª£ng cao</Label>
                <p className="text-sm text-muted-foreground">
                  ∆Øu ti√™n gi·ªçng t·ª± nhi√™n v√† ch·∫•t l∆∞·ª£ng cao h∆°n
                </p>
              </div>
              <Switch
                id="high-quality"
                checked={highQualityVoice}
                onCheckedChange={setHighQualityVoice}
              />
            </div>
            
            {/* T·ªëc ƒë·ªô n√≥i */}
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label htmlFor="rate-slider">T·ªëc ƒë·ªô n√≥i</Label>
                <span className="text-sm font-medium">{speechRate.toFixed(1)}x</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-xs text-muted-foreground">Ch·∫≠m</span>
                <Slider 
                  id="rate-slider"
                  min={0.5} 
                  max={1.5} 
                  step={0.1} 
                  value={[speechRate]} 
                  onValueChange={(values) => handleRateChange(values[0])} 
                />
                <span className="text-xs text-muted-foreground">Nhanh</span>
              </div>
            </div>
            
            {/* Cao ƒë·ªô gi·ªçng */}
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label htmlFor="pitch-slider">Cao ƒë·ªô gi·ªçng</Label>
                <span className="text-sm font-medium">{speechPitch.toFixed(1)}</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-xs text-muted-foreground">Th·∫•p</span>
                <Slider 
                  id="pitch-slider"
                  min={0.8} 
                  max={1.2} 
                  step={0.1} 
                  value={[speechPitch]} 
                  onValueChange={(values) => handlePitchChange(values[0])} 
                />
                <span className="text-xs text-muted-foreground">Cao</span>
              </div>
            </div>
            
            {/* √Çm l∆∞·ª£ng */}
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label htmlFor="volume-slider">√Çm l∆∞·ª£ng</Label>
                <span className="text-sm font-medium">{Math.round(speechVolume * 100)}%</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-xs text-muted-foreground">Nh·ªè</span>
                <Slider 
                  id="volume-slider"
                  min={0.1} 
                  max={1.0} 
                  step={0.1} 
                  value={[speechVolume]} 
                  onValueChange={(values) => handleVolumeChange(values[0])} 
                />
                <span className="text-xs text-muted-foreground">L·ªõn</span>
              </div>
            </div>
            
            {/* Ch·ªçn gi·ªçng ti·∫øng Anh */}
            <div className="space-y-2">
              <Label>Ch·ªçn gi·ªçng ti·∫øng Anh</Label>
              {englishVoices.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                  {englishVoices.map(voice => (
                    <Button
                      key={voice.voiceURI}
                      variant={preferredEnglishVoice === voice.voiceURI ? "default" : "outline"}
                      className="justify-start"
                      onClick={() => setPreferredEnglishVoice(voice.voiceURI)}
                    >
                      <div className="flex flex-col items-start">
                        <span>{voice.name}</span>
                        <span className="text-xs text-muted-foreground">{voice.lang}</span>
                      </div>
                    </Button>
                  ))}
                </div>
              ) : (
                <p className="text-sm text-muted-foreground">Kh√¥ng t√¨m th·∫•y gi·ªçng ti·∫øng Anh</p>
              )}
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => speakSample('en')}
                className="mt-2"
              >
                <Volume2 className="h-4 w-4 mr-2" /> Ki·ªÉm tra gi·ªçng ti·∫øng Anh
              </Button>
            </div>
            
            {/* Ch·ªçn gi·ªçng ti·∫øng Vi·ªát */}
            <div className="space-y-2">
              <Label>Ch·ªçn gi·ªçng ti·∫øng Vi·ªát</Label>
              {vietnameseVoices.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                  {vietnameseVoices.map(voice => (
                    <Button
                      key={voice.voiceURI}
                      variant={preferredVietnameseVoice === voice.voiceURI ? "default" : "outline"}
                      className="justify-start"
                      onClick={() => setPreferredVietnameseVoice(voice.voiceURI)}
                    >
                      <div className="flex flex-col items-start">
                        <span>{voice.name}</span>
                        <span className="text-xs text-muted-foreground">{voice.lang}</span>
                      </div>
                    </Button>
                  ))}
                </div>
              ) : (
                <p className="text-sm text-muted-foreground">Kh√¥ng t√¨m th·∫•y gi·ªçng ti·∫øng Vi·ªát</p>
              )}
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => speakSample('vi')}
                className="mt-2"
              >
                <Volume2 className="h-4 w-4 mr-2" /> Ki·ªÉm tra gi·ªçng ti·∫øng Vi·ªát
              </Button>
            </div>
          </div>
          
          <div className="mt-4 flex justify-end">
            <Button onClick={() => setIsVoiceSettingsOpen(false)}>
              ƒê√≥ng
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    );
  };

  return (
    <div className="relative flex h-[calc(100vh-4rem)]">
      {/* Main Content */}
      <div className={`flex-1 overflow-auto transition-all duration-300 ${showAiSidebar ? 'pr-[350px]' : ''}`}>
        <div className="space-y-4 p-4">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-bold">L·ªãch thi ƒë·∫•u</h2>
            <div className="flex space-x-2">
              <Button onClick={toggleAiSidebar} variant="outline" className="flex items-center">
                <Bot className="h-4 w-4 mr-2" /> {showAiSidebar ? "ƒê√≥ng AI" : "H·ªèi AI"}
              </Button>
              <Button onClick={handleAddMatch} className="bg-blue-500 hover:bg-blue-600">
                <Plus className="h-4 w-4 mr-2" /> Th√™m tr·∫≠n ƒë·∫•u
              </Button>
            </div>
          </div>

          <div className="flex space-x-2">
            <Button variant={filter === "all" ? "default" : "outline"} size="sm" onClick={() => setFilter("all")}>
              T·∫•t c·∫£
            </Button>
            <Button variant={filter === "upcoming" ? "default" : "outline"} size="sm" onClick={() => setFilter("upcoming")}>
              S·∫Øp di·ªÖn ra
            </Button>
            <Button
              variant={filter === "completed" ? "default" : "outline"}
              size="sm"
              onClick={() => setFilter("completed")}
            >
              ƒê√£ k·∫øt th√∫c
            </Button>
          </div>

          {sortedMatches.length === 0 ? (
            <div className="text-center p-8 text-gray-500">
              Kh√¥ng c√≥ tr·∫≠n ƒë·∫•u n√†o {filter === "upcoming" ? "s·∫Øp di·ªÖn ra" : filter === "completed" ? "ƒë√£ k·∫øt th√∫c" : ""}
            </div>
          ) : (
            <div className="space-y-4">
              {sortedMatches.map((match) => (
                <div
                  key={match.id}
                  className={`border rounded-lg p-4 ${
                    match.completed ? "bg-gray-50" : "bg-white"
                  } hover:shadow-md transition-shadow`}
                >
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <Badge variant={match.completed ? "secondary" : "default"}>
                        {match.completed ? "ƒê√£ k·∫øt th√∫c" : "S·∫Øp di·ªÖn ra"}
                      </Badge>
                      <div className="flex items-center mt-2 text-sm text-gray-500">
                        <Trophy className="h-4 w-4 mr-1" />
                        {match.competition}
                      </div>
                    </div>
                    <div className="flex space-x-1">
                      {match.completed && (
                        <>
                          <Button 
                            variant="outline" 
                            size="sm" 
                            className="h-8 flex items-center text-xs"
                            onClick={() => handleRateMatch(match)}
                          >
                            <Star className="h-3 w-3 mr-1" /> 
                            {match.playerRatings ? "Xem ƒë√°nh gi√°" : "ƒê√°nh gi√° c·∫ßu th·ªß"}
                          </Button>
                          <Button 
                            variant="outline" 
                            size="sm" 
                            className="h-8 flex items-center text-xs"
                            onClick={() => handleViewEvents(match)}
                          >
                            <Goal className="h-3 w-3 mr-1" /> 
                            {match.events ? "Xem s·ª± ki·ªán" : "Th√™m s·ª± ki·ªán"}
                          </Button>
                        </>
                      )}
                      <Button variant="ghost" size="sm" className="h-8 w-8 p-0" onClick={() => handleEditMatch(match)}>
                        <Edit className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="h-8 w-8 p-0 text-red-500"
                        onClick={() => handleDeleteMatch(match.id)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>

                  <div className="flex justify-between items-center mb-4">
                    <div className="text-right flex-1">
                      <p className="font-bold text-lg">{match.homeTeam}</p>
                      {match.completed && <p className="text-2xl font-bold">{match.homeScore}</p>}
                    </div>
                    <div className="mx-4 text-center">
                      <p className="text-sm font-medium">VS</p>
                      {match.completed && <p className="text-lg font-bold">-</p>}
                    </div>
                    <div className="text-left flex-1">
                      <p className="font-bold text-lg">{match.awayTeam}</p>
                      {match.completed && <p className="text-2xl font-bold">{match.awayScore}</p>}
                    </div>
                  </div>

                  {/* MVP Display */}
                  {match.playerRatings && match.completed && (match.playerRatings.homeMVP || match.playerRatings.awayMVP) && (
                    <div className="grid grid-cols-2 gap-4 mb-4">
                      {/* Home Team MVP */}
                      <div className="bg-yellow-100 rounded-lg p-5 relative overflow-hidden shadow-md border border-yellow-200">
                        <div className="absolute top-0 right-0 w-32 h-32 rounded-full bg-yellow-300 opacity-20 transform translate-x-10 -translate-y-10"></div>
                        
                        {match.homeScore !== undefined && match.awayScore !== undefined && match.homeScore > match.awayScore && (
                          <div className="absolute top-3 right-3 bg-blue-500 text-white px-3 py-1 rounded-full text-xs font-bold shadow-sm">
                            WIN
                          </div>
                        )}
                        
                        {match.homeScore !== undefined && match.awayScore !== undefined && match.homeScore < match.awayScore && (
                          <div className="absolute top-3 right-3 border border-gray-300 text-gray-600 px-3 py-1 rounded-full text-xs font-bold">
                            LOSS
                          </div>
                        )}
                        
                        <div className="flex items-start">
                          <div className="mr-4">
                            <Trophy className="h-10 w-10 text-yellow-500" />
                          </div>
                          <div>
                            <div className="text-base font-bold mb-3">MVP ƒê·ªôi nh√†</div>
                            {match.playerRatings?.homeMVP ? 
                              (() => {
                                const homeMvpPlayer = homeTeam.players.find(p => p.id === match.playerRatings?.homeMVP);
                                const homeMvpRating = match.playerRatings?.homeTeamRatings.find(r => r.playerId === match.playerRatings?.homeMVP);
                                
                                if (!homeMvpPlayer || !homeMvpRating) {
                                  return <span className="text-gray-500 text-sm">MVP kh√¥ng c√≥ s·∫µn</span>;
                                }
                                
                                return (
                                  <div className="flex items-center">
                                    <div className={`w-14 h-14 flex items-center justify-center rounded-full text-white bg-blue-500 mr-3 shadow-md`}>
                                      {homeMvpPlayer.image ? (
                                        <img src={homeMvpPlayer.image} alt={homeMvpPlayer.name} className="w-full h-full rounded-full object-cover" />
                                      ) : (
                                        <div className="text-lg font-bold">{homeMvpPlayer.position.charAt(0) || "?"}</div>
                                      )}
                                    </div>
                                    <div>
                                      <p className="text-lg font-bold">{homeMvpPlayer.name}</p>
                                      <p className="text-sm text-gray-600">{homeMvpPlayer.position}</p>
                                      <div className="flex items-center mt-1">
                                        <Star className="h-5 w-5 text-yellow-500 fill-yellow-500" />
                                        <span className="text-lg font-bold ml-1">{homeMvpRating.score.toFixed(1)}</span>
                                      </div>
                                    </div>
                                  </div>
                                );
                              })()
                              : <span className="text-gray-500 text-sm">Ch∆∞a c√≥ MVP</span>
                            }
                          </div>
                        </div>
                      </div>
                      
                      {/* Away Team MVP */}
                      <div className="bg-purple-100 rounded-lg p-5 relative overflow-hidden shadow-md border border-purple-200">
                        <div className="absolute top-0 right-0 w-32 h-32 rounded-full bg-purple-300 opacity-20 transform translate-x-10 -translate-y-10"></div>
                        
                        {match.homeScore !== undefined && match.awayScore !== undefined && match.awayScore > match.homeScore && (
                          <div className="absolute top-3 right-3 bg-blue-500 text-white px-3 py-1 rounded-full text-xs font-bold shadow-sm">
                            WIN
                          </div>
                        )}
                        
                        {match.homeScore !== undefined && match.awayScore !== undefined && match.awayScore < match.homeScore && (
                          <div className="absolute top-3 right-3 border border-gray-300 text-gray-600 px-3 py-1 rounded-full text-xs font-bold">
                            LOSS
                          </div>
                        )}
                        
                        <div className="flex items-start">
                          <div className="mr-4">
                            <Trophy className="h-10 w-10 text-purple-500" />
                          </div>
                          <div>
                            <div className="text-base font-bold mb-3">MVP ƒê·ªôi kh√°ch</div>
                            {match.playerRatings?.awayMVP ? 
                              (() => {
                                const awayMvpPlayer = awayTeam.players.find(p => p.id === match.playerRatings?.awayMVP);
                                const awayMvpRating = match.playerRatings?.awayTeamRatings.find(r => r.playerId === match.playerRatings?.awayMVP);
                                
                                if (!awayMvpPlayer || !awayMvpRating) {
                                  return <span className="text-gray-500 text-sm">MVP kh√¥ng c√≥ s·∫µn</span>;
                                }
                                
                                return (
                                  <div className="flex items-center">
                                    <div className={`w-14 h-14 flex items-center justify-center rounded-full text-white bg-red-500 mr-3 shadow-md`}>
                                      {awayMvpPlayer.image ? (
                                        <img src={awayMvpPlayer.image} alt={awayMvpPlayer.name} className="w-full h-full rounded-full object-cover" />
                                      ) : (
                                        <div className="text-lg font-bold">{awayMvpPlayer.position.charAt(0) || "?"}</div>
                                      )}
                                    </div>
                                    <div>
                                      <p className="text-lg font-bold">{awayMvpPlayer.name}</p>
                                      <p className="text-sm text-gray-600">{awayMvpPlayer.position}</p>
                                      <div className="flex items-center mt-1">
                                        <Star className="h-5 w-5 text-yellow-500 fill-yellow-500" />
                                        <span className="text-lg font-bold ml-1">{awayMvpRating.score.toFixed(1)}</span>
                                      </div>
                                    </div>
                                  </div>
                                );
                              })()
                              : <span className="text-gray-500 text-sm">Ch∆∞a c√≥ MVP</span>
                            }
                          </div>
                        </div>
                      </div>
                    </div>
                  )}

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-2 text-sm text-gray-600">
                    <div className="flex items-center">
                      <Calendar className="h-4 w-4 mr-2" />
                      {formatDate(match.date)}
                    </div>
                    <div className="flex items-center">
                      <Clock className="h-4 w-4 mr-2" />
                      {match.time}
                    </div>
                    <div className="flex items-center">
                      <MapPin className="h-4 w-4 mr-2" />
                      {match.venue}
                    </div>
                  </div>

                  {match.notes && (
                    <div className="mt-3 pt-3 border-t text-sm text-gray-600">
                      <p className="font-medium mb-1">Ghi ch√∫:</p>
                      <p>{match.notes}</p>
                    </div>
                  )}
                  
                  {/* Match Events Summary */}
                  {match.events && match.completed && (
                    <div className="mt-3 pt-3 border-t text-sm">
                      <p className="font-medium mb-2 flex items-center">
                        <Clock className="h-4 w-4 mr-1" /> Di·ªÖn bi·∫øn tr·∫≠n ƒë·∫•u:
                      </p>
                      
                      <div className="space-y-2">
                        {/* Goals */}
                        {match.events.goals.length > 0 && (
                          <div className="flex items-start">
                            <div className="w-6 flex-shrink-0">
                              <Goal className="h-4 w-4 text-green-600" />
                            </div>
                            <div className="flex-grow">
                              <p className="font-medium text-gray-700">B√†n th·∫Øng:</p>
                              <div className="space-y-1">
                                {match.events.goals
                                  .sort((a, b) => a.minute - b.minute)
                                  .map((goal, index) => {
                                    const isHomeTeam = goal.teamId === homeTeam.id;
                                    const player = isHomeTeam 
                                      ? homeTeam.players.find(p => p.id === goal.playerId)
                                      : awayTeam.players.find(p => p.id === goal.playerId);
                                    
                                    const assistPlayer = goal.assistPlayerId 
                                      ? (goal.teamId === homeTeam.id
                                          ? homeTeam.players.find(p => p.id === goal.assistPlayerId)
                                          : awayTeam.players.find(p => p.id === goal.assistPlayerId))
                                      : undefined;
                                    
                                    if (!player) return null;
                                    
                                    return (
                                      <div key={goal.id} className="flex items-center text-gray-600">
                                        <Badge className="mr-2 bg-gray-200 text-gray-800 font-normal">{goal.minute}'</Badge>
                                        <span className={`${isHomeTeam ? 'text-blue-600' : 'text-red-600'} font-medium`}>
                                          {player.name} 
                                          {goal.isOwnGoal && <span className="text-gray-500">(ph·∫£n l∆∞·ªõi)</span>}
                                          {goal.isPenalty && <span className="text-gray-500">(ph·∫°t ƒë·ªÅn)</span>}
                                        </span>
                                        {assistPlayer && (
                                          <span className="text-gray-500 ml-1 text-xs">
                                            (ki·∫øn t·∫°o: {assistPlayer.name})
                                          </span>
                                        )}
                                      </div>
                                    );
                                  })}
                              </div>
                            </div>
                          </div>
                        )}
                        
                        {/* Cards */}
                        {match.events.cards.length > 0 && (
                          <div className="flex items-start">
                            <div className="w-6 flex-shrink-0">
                              <Flag className="h-4 w-4 text-orange-500" />
                            </div>
                            <div className="flex-grow">
                              <p className="font-medium text-gray-700">Th·∫ª ph·∫°t:</p>
                              <div className="space-y-1">
                                {match.events.cards
                                  .sort((a, b) => a.minute - b.minute)
                                  .map((card, index) => {
                                    const isHomeTeam = card.teamId === homeTeam.id;
                                    const player = isHomeTeam 
                                      ? homeTeam.players.find(p => p.id === card.playerId)
                                      : awayTeam.players.find(p => p.id === card.playerId);
                                    
                                    if (!player) return null;
                                    
                                    return (
                                      <div key={card.id} className="flex items-center text-gray-600">
                                        <Badge className="mr-2 bg-gray-200 text-gray-800 font-normal">{card.minute}'</Badge>
                                        <div className={`w-3 h-4 mr-1 ${card.type === 'yellow' ? 'bg-yellow-400' : 'bg-red-500'}`}></div>
                                        <span className="font-medium">
                                          {player.name}
                                        </span>
                                        {card.reason && (
                                          <span className="text-gray-500 ml-1 text-xs">
                                            ({card.reason})
                                          </span>
                                        )}
                                      </div>
                                    );
                                  })}
                              </div>
                            </div>
                          </div>
                        )}
                        
                        {match.events.goals.length === 0 && match.events.cards.length === 0 && (
                          <p className="text-gray-500">Ch∆∞a c√≥ d·ªØ li·ªáu s·ª± ki·ªán</p>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* AI Sidebar */}
      {showAiSidebar && (
        <div className="fixed top-0 right-0 h-full w-[350px] border-l bg-slate-50 z-10 flex flex-col shadow-lg">
          <div className="p-4 border-b bg-white flex justify-between items-center">
            <h3 className="font-bold text-lg flex items-center">
              <Bot className="h-5 w-5 mr-2 text-blue-500" /> Tr·ª£ l√Ω AI
            </h3>
            <div className="flex items-center">
              <Button 
                variant="ghost" 
                size="sm" 
                className="h-8 w-8 p-0 mr-2" 
                onClick={() => setIsSpeechEnabled(!isSpeechEnabled)}
                title={isSpeechEnabled ? "T·∫Øt ph√°t √¢m" : "B·∫≠t ph√°t √¢m"}
              >
                {isSpeechEnabled ? <Volume2 className="h-4 w-4" /> : <VolumeX className="h-4 w-4" />}
              </Button>
              <Button variant="ghost" size="sm" className="h-8 w-8 p-0" onClick={toggleAiSidebar}>
                <X className="h-4 w-4" />
              </Button>
            </div>
          </div>

          {/* Chat messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {chatMessages.length === 0 ? (
              <div className="text-center text-gray-500 my-8">
                <Bot className="h-12 w-12 mx-auto mb-2 text-gray-400" />
                <p>H√£y ƒë·∫∑t c√¢u h·ªèi ho·∫∑c t·∫£i l√™n h√¨nh ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu.</p>
              </div>
            ) : (
              chatMessages.map((msg) => (
                <div 
                  key={msg.id} 
                  className={`relative ${
                    msg.role === 'user' 
                      ? 'bg-blue-100 ml-auto' 
                      : msg.role === 'agent'
                        ? 'bg-purple-100 border border-purple-200'
                        : 'bg-white border'
                  } rounded-lg p-3 max-w-[90%] ${msg.role === 'user' ? 'text-right' : 'text-left'}`}
                >
                  <div 
                    className="whitespace-pre-line"
                    dangerouslySetInnerHTML={{ __html: msg.content }}
                  />
                  
                  {/* Emoji reactions */}
                  {msg.reactions && Object.keys(msg.reactions).length > 0 && (
                    <div className="flex flex-wrap gap-1 mt-2">
                      {Object.values(msg.reactions).map((reaction) => (
                        <span 
                          key={reaction.emoji} 
                          className={cn(
                            "inline-flex items-center rounded-full border bg-white px-2 py-0.5 text-xs",
                            Date.now() - reaction.timestamp < 3000 && "animate-bounce"
                          )}
                          title={`${reaction.count} ${reaction.count > 1 ? 'reactions' : 'reaction'}`}
                        >
                          {reaction.emoji} {reaction.count > 1 && reaction.count}
                        </span>
                      ))}
                    </div>
                  )}
                  
                  {/* Add reaction button */}
                  <div className="absolute bottom-1 right-1">
                    <Popover open={showingEmojiFor === msg.id} onOpenChange={(open) => {
                      if (open) setShowingEmojiFor(msg.id);
                      else setShowingEmojiFor(null);
                    }}>
                      <PopoverTrigger asChild>
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="h-6 w-6 p-0 rounded-full opacity-50 hover:opacity-100"
                        >
                          <Smile className="h-3 w-3" />
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-1" align="end">
                        <div className="flex space-x-1">
                          {availableEmojis.map((emoji) => (
                            <button
                              key={emoji}
                              className="hover:bg-muted p-2 rounded-full transition-colors"
                              onClick={() => addReaction(msg.id, emoji)}
                            >
                              <span className="text-lg">{emoji}</span>
                            </button>
                          ))}
                        </div>
                      </PopoverContent>
                    </Popover>
                  </div>
                </div>
              ))
            )}
            {isAiLoading && (
              <div className="bg-white border rounded-lg p-3 max-w-[90%]">
                <div className="flex items-center space-x-2">
                  <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0s' }}></div>
                  <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.4s' }}></div>
                </div>
              </div>
            )}
          </div>

          {/* Pending action */}
          {pendingAgentAction && (
            <div className="p-4 border-t bg-purple-50 animate-pulse">
              <div className="flex justify-between items-center mb-2">
                <h4 className="font-medium text-sm flex items-center">
                  <Sparkles className="h-4 w-4 mr-2 text-purple-500" />
                  H√†nh ƒë·ªông ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t
                </h4>
              </div>
              
              {pendingAgentAction.type === 'ADD_MATCH' ? (
                <div>
                  <div className="text-sm mb-2 font-medium">
                    Th√™m tr·∫≠n ƒë·∫•u:
                  </div>
                  <div className="bg-white rounded p-2 mb-3">
                    <div className="flex justify-between items-center mb-2">
                      <span className="font-bold">{pendingAgentAction.match.homeTeam}</span>
                      <span className="text-xs mx-2">VS</span>
                      <span className="font-bold">{pendingAgentAction.match.awayTeam}</span>
                    </div>
                    {pendingAgentAction.match.completed && pendingAgentAction.match.homeScore !== undefined && pendingAgentAction.match.awayScore !== undefined && (
                      <div className="flex justify-center mb-2 text-sm">
                        <span className="font-bold">{pendingAgentAction.match.homeScore}</span>
                        <span className="mx-2">-</span>
                        <span className="font-bold">{pendingAgentAction.match.awayScore}</span>
                      </div>
                    )}
                    <div className="text-xs space-y-1 text-gray-600">
                      {pendingAgentAction.match.date && (
                        <div className="flex items-center">
                          <Calendar className="h-3 w-3 mr-1" />
                          {pendingAgentAction.match.date}
                        </div>
                      )}
                      {pendingAgentAction.match.time && (
                        <div className="flex items-center">
                          <Clock className="h-3 w-3 mr-1" />
                          {pendingAgentAction.match.time}
                        </div>
                      )}
                      {pendingAgentAction.match.venue && (
                        <div className="flex items-center">
                          <MapPin className="h-3 w-3 mr-1" />
                          {pendingAgentAction.match.venue}
                        </div>
                      )}
                      {pendingAgentAction.match.competition && (
                        <div className="flex items-center">
                          <Trophy className="h-3 w-3 mr-1" />
                          {pendingAgentAction.match.competition}
                        </div>
                      )}
                      {pendingAgentAction.match.notes && (
                        <div className="flex items-start mt-1 pt-1 border-t border-gray-100">
                          <span className="text-xs text-gray-500">Ghi ch√∫:</span>
                          <span className="text-xs ml-1">{pendingAgentAction.match.notes}</span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ) : (
                <p className="text-sm mb-3 font-medium">{getActionDescription(pendingAgentAction)}</p>
              )}
              
              <div className="flex space-x-2">
                <Button 
                  size="sm" 
                  variant="outline" 
                  className="w-full" 
                  onClick={() => setPendingAgentAction(null)}
                >
                  H·ªßy
                </Button>
                <Button 
                  size="sm" 
                  className="w-full bg-purple-600 hover:bg-purple-700 text-white font-medium" 
                  onClick={() => executeAgentAction(pendingAgentAction)}
                >
                  X√°c nh·∫≠n th·ª±c hi·ªán
                </Button>
              </div>
            </div>
          )}

          {/* Image preview */}
          {uploadedImage && (
            <div className="p-4 border-t bg-white">
              <div className="relative">
                <img 
                  src={uploadedImage} 
                  alt="Uploaded image" 
                  className="w-full h-auto max-h-[150px] object-contain rounded-lg border"
                />
                <Button 
                  variant="ghost" 
                  size="sm" 
                  className="absolute top-1 right-1 h-6 w-6 p-0 bg-white/80 rounded-full"
                  onClick={handleRemoveImage}
                >
                  <X className="h-3 w-3" />
                </Button>
              </div>
            </div>
          )}

          {/* Input area */}
          <div className="p-4 border-t bg-white">
            <div className="flex gap-2 mb-2">
              <Button 
                variant="outline" 
                size="sm" 
                className="flex items-center"
                onClick={() => fileInputRef.current?.click()}
              >
                <Image className="h-4 w-4 mr-1" />
                G·ª≠i ·∫£nh
              </Button>
              <Button 
                variant="outline"
                size="sm"
                className="flex items-center"
                onClick={() => setIsChatDialogOpen(true)}
              >
                <Bot className="h-4 w-4 mr-1" />
                Chat AI
              </Button>
              {recognitionSupported && (
                <Button
                  variant="outline"
                  size="sm"
                  className="flex items-center"
                  onClick={() => setIsRecognitionSettingsOpen(true)}
                >
                  <Settings className="h-4 w-4 mr-1" />
                  T√πy ch·ªânh voice
                </Button>
              )}
              <input 
                type="file" 
                ref={fileInputRef}
                accept="image/*" 
                className="hidden" 
                onChange={handleFileChange}
              />
            </div>
            {recognitionError && (
              <div className="mb-2 text-sm text-red-500 flex items-center">
                <XCircle className="h-4 w-4 mr-1" /> {recognitionError}
              </div>
            )}
            {isListening && speechConfidence > 0 && (
              <div className="mb-2 flex items-center">
                <div className="w-full mr-2">
                  <div className="h-1 w-full bg-gray-200 rounded-full overflow-hidden">
                    <div 
                      className={`h-full ${
                        speechConfidence > 80 ? 'bg-green-500' : 
                        speechConfidence > 60 ? 'bg-yellow-500' : 'bg-red-500'
                      }`} 
                      style={{width: `${speechConfidence}%`}}
                    ></div>
                  </div>
                </div>
                <span className="text-xs text-gray-500">{speechConfidence}%</span>
              </div>
            )}
            <div className="flex space-x-2">
              <div className="relative flex-1">
                <Textarea
                  placeholder="H·ªèi AI v·ªÅ l·ªãch thi ƒë·∫•u, ƒë·ªôi b√≥ng, ho·∫∑c th√¥ng tin b√≥ng ƒë√°..."
                  value={aiQuestion}
                  onChange={(e) => {
                    // Gi·ªõi h·∫°n ƒë·ªô d√†i vƒÉn b·∫£n nh·∫≠p v√†o
                    const text = e.target.value;
                    if (text.length <= MAX_PROMPT_LENGTH) {
                      setAiQuestion(text);
                      setAiQuestionLength(text.length);
                    }
                  }}
                  onKeyDown={(e) => {
                    if (e.key === "Enter" && !e.shiftKey) {
                      e.preventDefault();
                      askAI();
                    }
                  }}
                  disabled={isAiLoading}
                  className="pr-10 min-h-[80px] resize-none"
                  rows={3}
                  maxLength={MAX_PROMPT_LENGTH}
                />
                {recognitionSupported && (
                  <Button
                    type="button"
                    variant="ghost"
                    size="sm"
                    className={`absolute right-2 top-4 h-8 w-8 p-0 
                      ${isListening ? 'text-red-500 animate-pulse' : ''} 
                      ${recognitionError && !isListening ? 'text-red-400' : ''}`}
                    onClick={() => toggleListening('sidebar')}
                    title={
                      isListening 
                        ? `D·ª´ng ghi √¢m (${detectedLanguage === 'en' ? 'Ti·∫øng Anh' : 'Ti·∫øng Vi·ªát'})` 
                        : "Ghi √¢m gi·ªçng n√≥i"
                    }
                    disabled={networkRetryCount >= 3}
                  >
                    <div className="relative">
                      {isListening ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
                      {isListening && detectedLanguage && (
                        <div className="absolute top-0 right-0 -mt-1 -mr-1 w-2 h-2 rounded-full bg-blue-500" />
                      )}
                      {isListening && noiseReduction && (
                        <div className="absolute bottom-0 right-0 -mb-1 -mr-1 w-2 h-2 rounded-full bg-green-500" />
                      )}
                    </div>
                  </Button>
                )}
                <div className="absolute right-10 bottom-2 text-xs text-gray-400">
                  {aiQuestionLength}/{MAX_PROMPT_LENGTH}
                </div>
              </div>
              <Button onClick={askAI} disabled={isAiLoading} className="self-start">
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Dialog x√°c nh·∫≠n x√≥a */}
      <ConfirmDeleteDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
        title="X√°c nh·∫≠n x√≥a tr·∫≠n ƒë·∫•u"
        description="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a tr·∫≠n ƒë·∫•u n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c."
        onConfirm={confirmDeleteMatch}
      />
      
      {/* ChatAI Dialog */}
      <Dialog open={isChatDialogOpen} onOpenChange={setIsChatDialogOpen}>
        <DialogContent className="max-w-lg h-[80vh] flex flex-col">
          <DialogHeader>
            <DialogTitle>
              <div className="flex items-center justify-between w-full">
                <div className="flex items-center">
                  <Bot className="h-5 w-5 mr-2" />
                  Chat v·ªõi AI
                </div>
                <div className="flex items-center gap-2">
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className="h-8 w-8 p-0" 
                    onClick={() => setIsVoiceSettingsOpen(true)}
                    title="C√†i ƒë·∫∑t gi·ªçng n√≥i"
                  >
                    <Volume2 className="h-4 w-4" />
                  </Button>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className="h-8 w-8 p-0" 
                    onClick={() => setIsSpeechEnabled(!isSpeechEnabled)}
                    title={isSpeechEnabled ? "T·∫Øt ph√°t √¢m" : "B·∫≠t ph√°t √¢m"}
                  >
                    {isSpeechEnabled ? <Volume2 className="h-4 w-4" /> : <VolumeX className="h-4 w-4" />}
                  </Button>
                </div>
              </div>
            </DialogTitle>
            <DialogDescription>
              S·ª≠ d·ª•ng API key m·∫∑c ƒë·ªãnh ho·∫∑c nh·∫≠p API key c·ªßa b·∫°n ƒë·ªÉ tr√≤ chuy·ªán v·ªõi AI
            </DialogDescription>
          </DialogHeader>
          
          <div className="flex items-center space-x-2 mb-4">
            <Switch
              id="useCustomKey"
              checked={useCustomApiKey}
              onCheckedChange={setUseCustomApiKey}
            />
            <Label htmlFor="useCustomKey">S·ª≠ d·ª•ng API key c·ªßa ri√™ng t√¥i</Label>
          </div>
          
          {useCustomApiKey && (
            <div className="space-y-2 mb-4">
              <Label htmlFor="apiKey">API Key (Gemini API)</Label>
              <Input
                id="apiKey"
                value={customApiKey}
                onChange={(e) => setCustomApiKey(e.target.value)}
                placeholder="Nh·∫≠p API key c·ªßa b·∫°n"
                type="password"
              />
            </div>
          )}
          
          {/* Chat history */}
          <div className="flex-1 overflow-hidden">
            <ScrollArea className="h-full pr-4 border rounded-md p-4">
              <div className="space-y-4">
                {chatMessages.length === 0 ? (
                  <div className="text-center text-gray-500 py-8">
                    <Bot className="h-12 w-12 mx-auto mb-2 text-gray-400" />
                    <p>H√£y ƒë·∫∑t c√¢u h·ªèi ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán v·ªõi AI.</p>
                  </div>
                ) : (
                  chatMessages.map((msg) => (
                    <div 
                      key={msg.id} 
                      className={`relative ${
                        msg.role === 'user' 
                          ? 'bg-blue-100 ml-auto' 
                          : msg.role === 'agent'
                            ? 'bg-purple-100 border border-purple-200'
                            : 'bg-gray-100'
                      } rounded-lg p-3 max-w-[90%] ${msg.role === 'user' ? 'text-right' : 'text-left'}`}
                    >
                      <div 
                        className="whitespace-pre-line"
                        dangerouslySetInnerHTML={{ __html: msg.content }}
                      />
                      
                      {/* Emoji reactions */}
                      {msg.reactions && Object.keys(msg.reactions).length > 0 && (
                        <div className="flex flex-wrap gap-1 mt-2">
                          {Object.values(msg.reactions).map((reaction) => (
                            <span 
                              key={reaction.emoji} 
                              className={cn(
                                "inline-flex items-center rounded-full border bg-white px-2 py-0.5 text-xs",
                                Date.now() - reaction.timestamp < 3000 && "animate-bounce"
                              )}
                              title={`${reaction.count} ${reaction.count > 1 ? 'reactions' : 'reaction'}`}
                            >
                              {reaction.emoji} {reaction.count > 1 && reaction.count}
                            </span>
                          ))}
                        </div>
                      )}
                      
                      {/* Add reaction button */}
                      <div className="absolute bottom-1 right-1">
                        <Popover open={showingEmojiFor === msg.id} onOpenChange={(open) => {
                          if (open) setShowingEmojiFor(msg.id);
                          else setShowingEmojiFor(null);
                        }}>
                          <PopoverTrigger asChild>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="h-6 w-6 p-0 rounded-full opacity-50 hover:opacity-100"
                            >
                              <Smile className="h-3 w-3" />
                            </Button>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-1" align="end">
                            <div className="flex space-x-1">
                              {availableEmojis.map((emoji) => (
                                <button
                                  key={emoji}
                                  className="hover:bg-muted p-2 rounded-full transition-colors"
                                  onClick={() => addReaction(msg.id, emoji)}
                                >
                                  <span className="text-lg">{emoji}</span>
                                </button>
                              ))}
                            </div>
                          </PopoverContent>
                        </Popover>
                      </div>
                    </div>
                  ))
                )}
                {isAiLoading && (
                  <div className="bg-gray-100 rounded-lg p-3 max-w-[90%]">
                    <div className="flex items-center space-x-2">
                      <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0s' }}></div>
                      <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                      <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.4s' }}></div>
                    </div>
                  </div>
                )}
              </div>
            </ScrollArea>
          </div>
          
          {/* Input area */}
          <div className="mt-4 flex flex-col space-y-2">
            {recognitionError && (
              <div className="text-sm text-red-500 flex items-center">
                <XCircle className="h-4 w-4 mr-1" /> {recognitionError}
              </div>
            )}
            {isListening && speechConfidence > 0 && (
              <div className="flex items-center mb-1">
                <div className="w-full mr-2">
                  <div className="h-1 w-full bg-gray-200 rounded-full overflow-hidden">
                    <div 
                      className={`h-full ${
                        speechConfidence > 80 ? 'bg-green-500' : 
                        speechConfidence > 60 ? 'bg-yellow-500' : 'bg-red-500'
                      }`} 
                      style={{width: `${speechConfidence}%`}}
                    ></div>
                  </div>
                </div>
                <span className="text-xs text-gray-500">{speechConfidence}%</span>
              </div>
            )}
            <div className="flex space-x-2">
              <div className="relative flex-1">
                <Textarea
                  placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n"
                  value={chatDialogQuestion}
                  onChange={(e) => {
                    const text = e.target.value;
                    if (text.length <= MAX_PROMPT_LENGTH) {
                      setChatDialogQuestion(text);
                      setChatDialogQuestionLength(text.length);
                    }
                  }}
                  onKeyDown={(e) => {
                    if (e.key === "Enter" && !e.shiftKey) {
                      e.preventDefault();
                      handleChatDialogQuestion();
                    }
                  }}
                  disabled={isAiLoading}
                  className="pr-10 min-h-[80px] resize-none"
                  rows={3}
                  maxLength={MAX_PROMPT_LENGTH}
                />
                {recognitionSupported && (
                  <Button
                    type="button"
                    variant="ghost"
                    size="sm"
                    className={`absolute right-2 top-4 h-8 w-8 p-0 
                      ${isListening ? 'text-red-500 animate-pulse' : ''} 
                      ${recognitionError && !isListening ? 'text-red-400' : ''}`}
                    onClick={() => toggleListening('dialog')}
                    title={
                      isListening 
                        ? `D·ª´ng ghi √¢m (${detectedLanguage === 'en' ? 'Ti·∫øng Anh' : 'Ti·∫øng Vi·ªát'})` 
                        : "Ghi √¢m gi·ªçng n√≥i"
                    }
                    disabled={networkRetryCount >= 3}
                  >
                    <div className="relative">
                      {isListening ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
                      {isListening && detectedLanguage && (
                        <div className="absolute top-0 right-0 -mt-1 -mr-1 w-2 h-2 rounded-full bg-blue-500" />
                      )}
                      {isListening && noiseReduction && (
                        <div className="absolute bottom-0 right-0 -mb-1 -mr-1 w-2 h-2 rounded-full bg-green-500" />
                      )}
                    </div>
                  </Button>
                )}
                <div className="absolute right-10 bottom-2 text-xs text-gray-400">
                  {chatDialogQuestionLength}/{MAX_PROMPT_LENGTH}
                </div>
              </div>
              <Button 
                onClick={handleChatDialogQuestion} 
                disabled={isAiLoading || !chatDialogQuestion.trim()}
                className="self-start"
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>
              {editingMatch?.id.includes("match-") ? "Th√™m tr·∫≠n ƒë·∫•u m·ªõi" : "Ch·ªânh s·ª≠a tr·∫≠n ƒë·∫•u"}
            </DialogTitle>
          </DialogHeader>
          {editingMatch && (
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="homeTeam">ƒê·ªôi nh√†</Label>
                  <Input
                    id="homeTeam"
                    value={editingMatch.homeTeam}
                    onChange={(e) => setEditingMatch({ ...editingMatch, homeTeam: e.target.value })}
                    placeholder="T√™n ƒë·ªôi nh√†"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="awayTeam">ƒê·ªôi kh√°ch</Label>
                  <Input
                    id="awayTeam"
                    value={editingMatch.awayTeam}
                    onChange={(e) => setEditingMatch({ ...editingMatch, awayTeam: e.target.value })}
                    placeholder="T√™n ƒë·ªôi kh√°ch"
                  />
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="date">Ng√†y thi ƒë·∫•u</Label>
                  <Input
                    id="date"
                    type="date"
                    value={editingMatch.date}
                    onChange={(e) => setEditingMatch({ ...editingMatch, date: e.target.value })}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="time">Gi·ªù thi ƒë·∫•u</Label>
                  <Input
                    id="time"
                    type="time"
                    value={editingMatch.time}
                    onChange={(e) => setEditingMatch({ ...editingMatch, time: e.target.value })}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="venue">ƒê·ªãa ƒëi·ªÉm</Label>
                <Input
                  id="venue"
                  value={editingMatch.venue}
                  onChange={(e) => setEditingMatch({ ...editingMatch, venue: e.target.value })}
                  placeholder="S√¢n v·∫≠n ƒë·ªông"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="competition">Gi·∫£i ƒë·∫•u</Label>
                <Select
                  value={editingMatch.competition}
                  onValueChange={(value) => setEditingMatch({ ...editingMatch, competition: value })}
                >
                  <SelectTrigger id="competition">
                    <SelectValue placeholder="Ch·ªçn gi·∫£i ƒë·∫•u" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="V-League">V-League</SelectItem>
                    <SelectItem value="C√∫p Qu·ªëc Gia">C√∫p Qu·ªëc Gia</SelectItem>
                    <SelectItem value="AFC Champions League">AFC Champions League</SelectItem>
                    <SelectItem value="Giao h·ªØu">Giao h·ªØu</SelectItem>
                    <SelectItem value="Ngo·∫°i h·∫°ng Anh">Ngo·∫°i h·∫°ng Anh</SelectItem>
                    <SelectItem value="Champions League">Champions League</SelectItem>
                    <SelectItem value="World Cup">World Cup</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex items-center space-x-2">
                <Switch
                  id="completed"
                  checked={editingMatch.completed}
                  onCheckedChange={(checked) => setEditingMatch({ ...editingMatch, completed: checked })}
                />
                <Label htmlFor="completed">ƒê√£ k·∫øt th√∫c</Label>
              </div>

              {editingMatch.completed && (
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="homeScore">B√†n th·∫Øng ƒë·ªôi nh√†</Label>
                    <Input
                      id="homeScore"
                      type="number"
                      min={0}
                      value={editingMatch.homeScore || 0}
                      onChange={(e) =>
                        setEditingMatch({ ...editingMatch, homeScore: Number.parseInt(e.target.value) || 0 })
                      }
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="awayScore">B√†n th·∫Øng ƒë·ªôi kh√°ch</Label>
                    <Input
                      id="awayScore"
                      type="number"
                      min={0}
                      value={editingMatch.awayScore || 0}
                      onChange={(e) =>
                        setEditingMatch({ ...editingMatch, awayScore: Number.parseInt(e.target.value) || 0 })
                      }
                    />
                  </div>
                </div>
              )}

              <div className="space-y-2">
                <Label htmlFor="notes">Ghi ch√∫</Label>
                <Textarea
                  id="notes"
                  value={editingMatch.notes || ""}
                  onChange={(e) => setEditingMatch({ ...editingMatch, notes: e.target.value })}
                  placeholder="Th√¥ng tin th√™m v·ªÅ tr·∫≠n ƒë·∫•u"
                  rows={3}
                />
              </div>

              <div className="flex justify-end space-x-2 pt-2">
                <Button variant="outline" onClick={() => setIsDialogOpen(false)}>
                  H·ªßy
                </Button>
                <Button onClick={handleSaveMatch}>L∆∞u</Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Player Rating Dialog */}
      {ratingMatch && (
        <PlayerRating 
          match={ratingMatch}
          homeTeam={homeTeam}
          awayTeam={awayTeam}
          open={isRatingDialogOpen}
          onOpenChange={setIsRatingDialogOpen}
          onSaveRatings={handleSaveRatings}
        />
      )}

      {/* Match Events Dialog */}
      {eventsMatch && (
        <MatchEvents 
          match={eventsMatch}
          homeTeam={homeTeam}
          awayTeam={awayTeam}
          open={isEventsDialogOpen}
          onOpenChange={setIsEventsDialogOpen}
          onSaveEvents={handleSaveEvents}
        />
      )}

      {/* Recognition settings dialog */}
      <RecognitionSettingsDialog />
      
      {/* Voice settings dialog */}
      <VoiceSettingsDialog />
    </div>
  )
}
